package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// PromptTagsN is a PromptTags object, all fields are nullable
type PromptTagsN struct {
	original        *promptTagsOriginal
	promptTagsModel *PromptTagsModel

	Id          null.Int    `json:"id"`
	TagName     null.String `json:"tag_name"`
	TagValue    null.String `json:"tag_value"`
	Description null.String `json:"description"`
	Category    null.String `json:"category"`
	CategorySub null.String `json:"category_sub"`
	TagType     null.Int    `json:"tag_type"`
	Meta        null.String `json:"meta"`
	Status      null.Int    `json:"status"`
	CreatedAt   null.Time
	UpdatedAt   null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *PromptTagsN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for PromptTags
func (inst *PromptTagsN) SetModel(promptTagsModel *PromptTagsModel) {
	inst.promptTagsModel = promptTagsModel
}

// promptTagsOriginal is an object which stores original PromptTags from database
type promptTagsOriginal struct {
	Id          null.Int
	TagName     null.String
	TagValue    null.String
	Description null.String
	Category    null.String
	CategorySub null.String
	TagType     null.Int
	Meta        null.String
	Status      null.Int
	CreatedAt   null.Time
	UpdatedAt   null.Time
}

// Staled identify whether the object has been modified
func (inst *PromptTagsN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &promptTagsOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.TagName != inst.original.TagName {
			return true
		}
		if inst.TagValue != inst.original.TagValue {
			return true
		}
		if inst.Description != inst.original.Description {
			return true
		}
		if inst.Category != inst.original.Category {
			return true
		}
		if inst.CategorySub != inst.original.CategorySub {
			return true
		}
		if inst.TagType != inst.original.TagType {
			return true
		}
		if inst.Meta != inst.original.Meta {
			return true
		}
		if inst.Status != inst.original.Status {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "tag_name":
				if inst.TagName != inst.original.TagName {
					return true
				}
			case "tag_value":
				if inst.TagValue != inst.original.TagValue {
					return true
				}
			case "description":
				if inst.Description != inst.original.Description {
					return true
				}
			case "category":
				if inst.Category != inst.original.Category {
					return true
				}
			case "category_sub":
				if inst.CategorySub != inst.original.CategorySub {
					return true
				}
			case "tag_type":
				if inst.TagType != inst.original.TagType {
					return true
				}
			case "meta":
				if inst.Meta != inst.original.Meta {
					return true
				}
			case "status":
				if inst.Status != inst.original.Status {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *PromptTagsN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &promptTagsOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.TagName != inst.original.TagName {
			kv["tag_name"] = inst.TagName
		}
		if inst.TagValue != inst.original.TagValue {
			kv["tag_value"] = inst.TagValue
		}
		if inst.Description != inst.original.Description {
			kv["description"] = inst.Description
		}
		if inst.Category != inst.original.Category {
			kv["category"] = inst.Category
		}
		if inst.CategorySub != inst.original.CategorySub {
			kv["category_sub"] = inst.CategorySub
		}
		if inst.TagType != inst.original.TagType {
			kv["tag_type"] = inst.TagType
		}
		if inst.Meta != inst.original.Meta {
			kv["meta"] = inst.Meta
		}
		if inst.Status != inst.original.Status {
			kv["status"] = inst.Status
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "tag_name":
				if inst.TagName != inst.original.TagName {
					kv["tag_name"] = inst.TagName
				}
			case "tag_value":
				if inst.TagValue != inst.original.TagValue {
					kv["tag_value"] = inst.TagValue
				}
			case "description":
				if inst.Description != inst.original.Description {
					kv["description"] = inst.Description
				}
			case "category":
				if inst.Category != inst.original.Category {
					kv["category"] = inst.Category
				}
			case "category_sub":
				if inst.CategorySub != inst.original.CategorySub {
					kv["category_sub"] = inst.CategorySub
				}
			case "tag_type":
				if inst.TagType != inst.original.TagType {
					kv["tag_type"] = inst.TagType
				}
			case "meta":
				if inst.Meta != inst.original.Meta {
					kv["meta"] = inst.Meta
				}
			case "status":
				if inst.Status != inst.original.Status {
					kv["status"] = inst.Status
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *PromptTagsN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.promptTagsModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.promptTagsModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a prompt_tags
func (inst *PromptTagsN) Delete(ctx context.Context) error {
	if inst.promptTagsModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.promptTagsModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *PromptTagsN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type promptTagsScope struct {
	name  string
	apply func(builder query.Condition)
}

var promptTagsGlobalScopes = make([]promptTagsScope, 0)
var promptTagsLocalScopes = make([]promptTagsScope, 0)

// AddGlobalScopeForPromptTags assign a global scope to a model
func AddGlobalScopeForPromptTags(name string, apply func(builder query.Condition)) {
	promptTagsGlobalScopes = append(promptTagsGlobalScopes, promptTagsScope{name: name, apply: apply})
}

// AddLocalScopeForPromptTags assign a local scope to a model
func AddLocalScopeForPromptTags(name string, apply func(builder query.Condition)) {
	promptTagsLocalScopes = append(promptTagsLocalScopes, promptTagsScope{name: name, apply: apply})
}

func (m *PromptTagsModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range promptTagsGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range promptTagsLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *PromptTagsModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *PromptTagsModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type PromptTags struct {
	Id          int64  `json:"id"`
	TagName     string `json:"tag_name"`
	TagValue    string `json:"tag_value"`
	Description string `json:"description"`
	Category    string `json:"category"`
	CategorySub string `json:"category_sub"`
	TagType     int64  `json:"tag_type"`
	Meta        string `json:"meta"`
	Status      int64  `json:"status"`
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (w PromptTags) ToPromptTagsN(allows ...string) PromptTagsN {
	if len(allows) == 0 {
		return PromptTagsN{

			Id:          null.IntFrom(int64(w.Id)),
			TagName:     null.StringFrom(w.TagName),
			TagValue:    null.StringFrom(w.TagValue),
			Description: null.StringFrom(w.Description),
			Category:    null.StringFrom(w.Category),
			CategorySub: null.StringFrom(w.CategorySub),
			TagType:     null.IntFrom(int64(w.TagType)),
			Meta:        null.StringFrom(w.Meta),
			Status:      null.IntFrom(int64(w.Status)),
			CreatedAt:   null.TimeFrom(w.CreatedAt),
			UpdatedAt:   null.TimeFrom(w.UpdatedAt),
		}
	}

	res := PromptTagsN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "tag_name":
			res.TagName = null.StringFrom(w.TagName)
		case "tag_value":
			res.TagValue = null.StringFrom(w.TagValue)
		case "description":
			res.Description = null.StringFrom(w.Description)
		case "category":
			res.Category = null.StringFrom(w.Category)
		case "category_sub":
			res.CategorySub = null.StringFrom(w.CategorySub)
		case "tag_type":
			res.TagType = null.IntFrom(int64(w.TagType))
		case "meta":
			res.Meta = null.StringFrom(w.Meta)
		case "status":
			res.Status = null.IntFrom(int64(w.Status))
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w PromptTags) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *PromptTagsN) ToPromptTags() PromptTags {
	return PromptTags{

		Id:          w.Id.Int64,
		TagName:     w.TagName.String,
		TagValue:    w.TagValue.String,
		Description: w.Description.String,
		Category:    w.Category.String,
		CategorySub: w.CategorySub.String,
		TagType:     w.TagType.Int64,
		Meta:        w.Meta.String,
		Status:      w.Status.Int64,
		CreatedAt:   w.CreatedAt.Time,
		UpdatedAt:   w.UpdatedAt.Time,
	}
}

// PromptTagsModel is a model which encapsulates the operations of the object
type PromptTagsModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var promptTagsTableName = "prompt_tags"

// PromptTagsTable return table name for PromptTags
func PromptTagsTable() string {
	return promptTagsTableName
}

const (
	FieldPromptTagsId          = "id"
	FieldPromptTagsTagName     = "tag_name"
	FieldPromptTagsTagValue    = "tag_value"
	FieldPromptTagsDescription = "description"
	FieldPromptTagsCategory    = "category"
	FieldPromptTagsCategorySub = "category_sub"
	FieldPromptTagsTagType     = "tag_type"
	FieldPromptTagsMeta        = "meta"
	FieldPromptTagsStatus      = "status"
	FieldPromptTagsCreatedAt   = "created_at"
	FieldPromptTagsUpdatedAt   = "updated_at"
)

// PromptTagsFields return all fields in PromptTags model
func PromptTagsFields() []string {
	return []string{
		"id",
		"tag_name",
		"tag_value",
		"description",
		"category",
		"category_sub",
		"tag_type",
		"meta",
		"status",
		"created_at",
		"updated_at",
	}
}

func SetPromptTagsTable(tableName string) {
	promptTagsTableName = tableName
}

// NewPromptTagsModel create a PromptTagsModel
func NewPromptTagsModel(db query.Database) *PromptTagsModel {
	return &PromptTagsModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           promptTagsTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *PromptTagsModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *PromptTagsModel) clone() *PromptTagsModel {
	return &PromptTagsModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *PromptTagsModel) WithoutGlobalScopes(names ...string) *PromptTagsModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *PromptTagsModel) WithLocalScopes(names ...string) *PromptTagsModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *PromptTagsModel) Condition(builder query.SQLBuilder) *PromptTagsModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *PromptTagsModel) Find(ctx context.Context, id int64) (*PromptTagsN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *PromptTagsModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *PromptTagsModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *PromptTagsModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]PromptTagsN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *PromptTagsModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]PromptTagsN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"tag_name",
			"tag_value",
			"description",
			"category",
			"category_sub",
			"tag_type",
			"meta",
			"status",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "tag_name":
			selectFields = append(selectFields, f)
		case "tag_value":
			selectFields = append(selectFields, f)
		case "description":
			selectFields = append(selectFields, f)
		case "category":
			selectFields = append(selectFields, f)
		case "category_sub":
			selectFields = append(selectFields, f)
		case "tag_type":
			selectFields = append(selectFields, f)
		case "meta":
			selectFields = append(selectFields, f)
		case "status":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*PromptTagsN, []interface{}) {
		var promptTagsVar PromptTagsN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &promptTagsVar.Id)
			case "tag_name":
				scanFields = append(scanFields, &promptTagsVar.TagName)
			case "tag_value":
				scanFields = append(scanFields, &promptTagsVar.TagValue)
			case "description":
				scanFields = append(scanFields, &promptTagsVar.Description)
			case "category":
				scanFields = append(scanFields, &promptTagsVar.Category)
			case "category_sub":
				scanFields = append(scanFields, &promptTagsVar.CategorySub)
			case "tag_type":
				scanFields = append(scanFields, &promptTagsVar.TagType)
			case "meta":
				scanFields = append(scanFields, &promptTagsVar.Meta)
			case "status":
				scanFields = append(scanFields, &promptTagsVar.Status)
			case "created_at":
				scanFields = append(scanFields, &promptTagsVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &promptTagsVar.UpdatedAt)
			}
		}

		return &promptTagsVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	promptTagss := make([]PromptTagsN, 0)
	for rows.Next() {
		promptTagsReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		promptTagsReal.original = &promptTagsOriginal{}
		_ = query.Copy(promptTagsReal, promptTagsReal.original)

		promptTagsReal.SetModel(m)
		promptTagss = append(promptTagss, *promptTagsReal)
	}

	return promptTagss, nil
}

// First return first result for given query
func (m *PromptTagsModel) First(ctx context.Context, builders ...query.SQLBuilder) (*PromptTagsN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new prompt_tags to database
func (m *PromptTagsModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all prompt_tagss to database
func (m *PromptTagsModel) SaveAll(ctx context.Context, promptTagss []PromptTagsN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, promptTags := range promptTagss {
		id, err := m.Save(ctx, promptTags)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a prompt_tags to database
func (m *PromptTagsModel) Save(ctx context.Context, promptTags PromptTagsN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, promptTags.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new prompt_tags or update it when it has a id > 0
func (m *PromptTagsModel) SaveOrUpdate(ctx context.Context, promptTags PromptTagsN, onlyFields ...string) (id int64, updated bool, err error) {
	if promptTags.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, promptTags.Id.Int64, promptTags, onlyFields...)
		return promptTags.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, promptTags, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *PromptTagsModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *PromptTagsModel) Update(ctx context.Context, builder query.SQLBuilder, promptTags PromptTagsN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, promptTags.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *PromptTagsModel) UpdateById(ctx context.Context, id int64, promptTags PromptTagsN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, promptTags.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *PromptTagsModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *PromptTagsModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
