package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// ChatGroupMemberN is a ChatGroupMember object, all fields are nullable
type ChatGroupMemberN struct {
	original             *chatGroupMemberOriginal
	chatGroupMemberModel *ChatGroupMemberModel

	Id        null.Int    `json:"id"`
	GroupId   null.Int    `json:"group_id,omitempty"`
	UserId    null.Int    `json:"user_id,omitempty"`
	ModelId   null.String `json:"model_id,omitempty"`
	ModelName null.String `json:"model_name,omitempty"`
	Status    null.Int    `json:"status,omitempty"`
	CreatedAt null.Time
	UpdatedAt null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *ChatGroupMemberN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for ChatGroupMember
func (inst *ChatGroupMemberN) SetModel(chatGroupMemberModel *ChatGroupMemberModel) {
	inst.chatGroupMemberModel = chatGroupMemberModel
}

// chatGroupMemberOriginal is an object which stores original ChatGroupMember from database
type chatGroupMemberOriginal struct {
	Id        null.Int
	GroupId   null.Int
	UserId    null.Int
	ModelId   null.String
	ModelName null.String
	Status    null.Int
	CreatedAt null.Time
	UpdatedAt null.Time
}

// Staled identify whether the object has been modified
func (inst *ChatGroupMemberN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &chatGroupMemberOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.GroupId != inst.original.GroupId {
			return true
		}
		if inst.UserId != inst.original.UserId {
			return true
		}
		if inst.ModelId != inst.original.ModelId {
			return true
		}
		if inst.ModelName != inst.original.ModelName {
			return true
		}
		if inst.Status != inst.original.Status {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "group_id":
				if inst.GroupId != inst.original.GroupId {
					return true
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					return true
				}
			case "model_id":
				if inst.ModelId != inst.original.ModelId {
					return true
				}
			case "model_name":
				if inst.ModelName != inst.original.ModelName {
					return true
				}
			case "status":
				if inst.Status != inst.original.Status {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *ChatGroupMemberN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &chatGroupMemberOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.GroupId != inst.original.GroupId {
			kv["group_id"] = inst.GroupId
		}
		if inst.UserId != inst.original.UserId {
			kv["user_id"] = inst.UserId
		}
		if inst.ModelId != inst.original.ModelId {
			kv["model_id"] = inst.ModelId
		}
		if inst.ModelName != inst.original.ModelName {
			kv["model_name"] = inst.ModelName
		}
		if inst.Status != inst.original.Status {
			kv["status"] = inst.Status
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "group_id":
				if inst.GroupId != inst.original.GroupId {
					kv["group_id"] = inst.GroupId
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					kv["user_id"] = inst.UserId
				}
			case "model_id":
				if inst.ModelId != inst.original.ModelId {
					kv["model_id"] = inst.ModelId
				}
			case "model_name":
				if inst.ModelName != inst.original.ModelName {
					kv["model_name"] = inst.ModelName
				}
			case "status":
				if inst.Status != inst.original.Status {
					kv["status"] = inst.Status
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *ChatGroupMemberN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.chatGroupMemberModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.chatGroupMemberModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a chat_group_member
func (inst *ChatGroupMemberN) Delete(ctx context.Context) error {
	if inst.chatGroupMemberModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.chatGroupMemberModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *ChatGroupMemberN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type chatGroupMemberScope struct {
	name  string
	apply func(builder query.Condition)
}

var chatGroupMemberGlobalScopes = make([]chatGroupMemberScope, 0)
var chatGroupMemberLocalScopes = make([]chatGroupMemberScope, 0)

// AddGlobalScopeForChatGroupMember assign a global scope to a model
func AddGlobalScopeForChatGroupMember(name string, apply func(builder query.Condition)) {
	chatGroupMemberGlobalScopes = append(chatGroupMemberGlobalScopes, chatGroupMemberScope{name: name, apply: apply})
}

// AddLocalScopeForChatGroupMember assign a local scope to a model
func AddLocalScopeForChatGroupMember(name string, apply func(builder query.Condition)) {
	chatGroupMemberLocalScopes = append(chatGroupMemberLocalScopes, chatGroupMemberScope{name: name, apply: apply})
}

func (m *ChatGroupMemberModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range chatGroupMemberGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range chatGroupMemberLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *ChatGroupMemberModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *ChatGroupMemberModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type ChatGroupMember struct {
	Id        int64  `json:"id"`
	GroupId   int64  `json:"group_id,omitempty"`
	UserId    int64  `json:"user_id,omitempty"`
	ModelId   string `json:"model_id,omitempty"`
	ModelName string `json:"model_name,omitempty"`
	Status    int64  `json:"status,omitempty"`
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (w ChatGroupMember) ToChatGroupMemberN(allows ...string) ChatGroupMemberN {
	if len(allows) == 0 {
		return ChatGroupMemberN{

			Id:        null.IntFrom(int64(w.Id)),
			GroupId:   null.IntFrom(int64(w.GroupId)),
			UserId:    null.IntFrom(int64(w.UserId)),
			ModelId:   null.StringFrom(w.ModelId),
			ModelName: null.StringFrom(w.ModelName),
			Status:    null.IntFrom(int64(w.Status)),
			CreatedAt: null.TimeFrom(w.CreatedAt),
			UpdatedAt: null.TimeFrom(w.UpdatedAt),
		}
	}

	res := ChatGroupMemberN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "group_id":
			res.GroupId = null.IntFrom(int64(w.GroupId))
		case "user_id":
			res.UserId = null.IntFrom(int64(w.UserId))
		case "model_id":
			res.ModelId = null.StringFrom(w.ModelId)
		case "model_name":
			res.ModelName = null.StringFrom(w.ModelName)
		case "status":
			res.Status = null.IntFrom(int64(w.Status))
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w ChatGroupMember) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *ChatGroupMemberN) ToChatGroupMember() ChatGroupMember {
	return ChatGroupMember{

		Id:        w.Id.Int64,
		GroupId:   w.GroupId.Int64,
		UserId:    w.UserId.Int64,
		ModelId:   w.ModelId.String,
		ModelName: w.ModelName.String,
		Status:    w.Status.Int64,
		CreatedAt: w.CreatedAt.Time,
		UpdatedAt: w.UpdatedAt.Time,
	}
}

// ChatGroupMemberModel is a model which encapsulates the operations of the object
type ChatGroupMemberModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var chatGroupMemberTableName = "chat_group_member"

// ChatGroupMemberTable return table name for ChatGroupMember
func ChatGroupMemberTable() string {
	return chatGroupMemberTableName
}

const (
	FieldChatGroupMemberId        = "id"
	FieldChatGroupMemberGroupId   = "group_id"
	FieldChatGroupMemberUserId    = "user_id"
	FieldChatGroupMemberModelId   = "model_id"
	FieldChatGroupMemberModelName = "model_name"
	FieldChatGroupMemberStatus    = "status"
	FieldChatGroupMemberCreatedAt = "created_at"
	FieldChatGroupMemberUpdatedAt = "updated_at"
)

// ChatGroupMemberFields return all fields in ChatGroupMember model
func ChatGroupMemberFields() []string {
	return []string{
		"id",
		"group_id",
		"user_id",
		"model_id",
		"model_name",
		"status",
		"created_at",
		"updated_at",
	}
}

func SetChatGroupMemberTable(tableName string) {
	chatGroupMemberTableName = tableName
}

// NewChatGroupMemberModel create a ChatGroupMemberModel
func NewChatGroupMemberModel(db query.Database) *ChatGroupMemberModel {
	return &ChatGroupMemberModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           chatGroupMemberTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *ChatGroupMemberModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *ChatGroupMemberModel) clone() *ChatGroupMemberModel {
	return &ChatGroupMemberModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *ChatGroupMemberModel) WithoutGlobalScopes(names ...string) *ChatGroupMemberModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *ChatGroupMemberModel) WithLocalScopes(names ...string) *ChatGroupMemberModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *ChatGroupMemberModel) Condition(builder query.SQLBuilder) *ChatGroupMemberModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *ChatGroupMemberModel) Find(ctx context.Context, id int64) (*ChatGroupMemberN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *ChatGroupMemberModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *ChatGroupMemberModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *ChatGroupMemberModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]ChatGroupMemberN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *ChatGroupMemberModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]ChatGroupMemberN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"group_id",
			"user_id",
			"model_id",
			"model_name",
			"status",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "group_id":
			selectFields = append(selectFields, f)
		case "user_id":
			selectFields = append(selectFields, f)
		case "model_id":
			selectFields = append(selectFields, f)
		case "model_name":
			selectFields = append(selectFields, f)
		case "status":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*ChatGroupMemberN, []interface{}) {
		var chatGroupMemberVar ChatGroupMemberN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &chatGroupMemberVar.Id)
			case "group_id":
				scanFields = append(scanFields, &chatGroupMemberVar.GroupId)
			case "user_id":
				scanFields = append(scanFields, &chatGroupMemberVar.UserId)
			case "model_id":
				scanFields = append(scanFields, &chatGroupMemberVar.ModelId)
			case "model_name":
				scanFields = append(scanFields, &chatGroupMemberVar.ModelName)
			case "status":
				scanFields = append(scanFields, &chatGroupMemberVar.Status)
			case "created_at":
				scanFields = append(scanFields, &chatGroupMemberVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &chatGroupMemberVar.UpdatedAt)
			}
		}

		return &chatGroupMemberVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	chatGroupMembers := make([]ChatGroupMemberN, 0)
	for rows.Next() {
		chatGroupMemberReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		chatGroupMemberReal.original = &chatGroupMemberOriginal{}
		_ = query.Copy(chatGroupMemberReal, chatGroupMemberReal.original)

		chatGroupMemberReal.SetModel(m)
		chatGroupMembers = append(chatGroupMembers, *chatGroupMemberReal)
	}

	return chatGroupMembers, nil
}

// First return first result for given query
func (m *ChatGroupMemberModel) First(ctx context.Context, builders ...query.SQLBuilder) (*ChatGroupMemberN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new chat_group_member to database
func (m *ChatGroupMemberModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all chat_group_members to database
func (m *ChatGroupMemberModel) SaveAll(ctx context.Context, chatGroupMembers []ChatGroupMemberN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, chatGroupMember := range chatGroupMembers {
		id, err := m.Save(ctx, chatGroupMember)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a chat_group_member to database
func (m *ChatGroupMemberModel) Save(ctx context.Context, chatGroupMember ChatGroupMemberN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, chatGroupMember.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new chat_group_member or update it when it has a id > 0
func (m *ChatGroupMemberModel) SaveOrUpdate(ctx context.Context, chatGroupMember ChatGroupMemberN, onlyFields ...string) (id int64, updated bool, err error) {
	if chatGroupMember.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, chatGroupMember.Id.Int64, chatGroupMember, onlyFields...)
		return chatGroupMember.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, chatGroupMember, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *ChatGroupMemberModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *ChatGroupMemberModel) Update(ctx context.Context, builder query.SQLBuilder, chatGroupMember ChatGroupMemberN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, chatGroupMember.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *ChatGroupMemberModel) UpdateById(ctx context.Context, id int64, chatGroupMember ChatGroupMemberN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, chatGroupMember.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *ChatGroupMemberModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *ChatGroupMemberModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}

// ChatGroupMessageN is a ChatGroupMessage object, all fields are nullable
type ChatGroupMessageN struct {
	original              *chatGroupMessageOriginal
	chatGroupMessageModel *ChatGroupMessageModel

	Id            null.Int    `json:"id"`
	GroupId       null.Int    `json:"group_id,omitempty"`
	UserId        null.Int    `json:"user_id,omitempty"`
	Message       null.String `json:"message,omitempty"`
	Role          null.Int    `json:"role,omitempty"`
	TokenConsumed null.Int    `json:"token_consumed,omitempty"`
	QuotaConsumed null.Int    `json:"quota_consumed,omitempty"`
	Pid           null.Int    `json:"pid,omitempty"`
	MemberId      null.Int    `json:"member_id,omitempty"`
	Status        null.Int    `json:"status,omitempty"`
	Error         null.String `json:"error,omitempty"`
	CreatedAt     null.Time
	UpdatedAt     null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *ChatGroupMessageN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for ChatGroupMessage
func (inst *ChatGroupMessageN) SetModel(chatGroupMessageModel *ChatGroupMessageModel) {
	inst.chatGroupMessageModel = chatGroupMessageModel
}

// chatGroupMessageOriginal is an object which stores original ChatGroupMessage from database
type chatGroupMessageOriginal struct {
	Id            null.Int
	GroupId       null.Int
	UserId        null.Int
	Message       null.String
	Role          null.Int
	TokenConsumed null.Int
	QuotaConsumed null.Int
	Pid           null.Int
	MemberId      null.Int
	Status        null.Int
	Error         null.String
	CreatedAt     null.Time
	UpdatedAt     null.Time
}

// Staled identify whether the object has been modified
func (inst *ChatGroupMessageN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &chatGroupMessageOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.GroupId != inst.original.GroupId {
			return true
		}
		if inst.UserId != inst.original.UserId {
			return true
		}
		if inst.Message != inst.original.Message {
			return true
		}
		if inst.Role != inst.original.Role {
			return true
		}
		if inst.TokenConsumed != inst.original.TokenConsumed {
			return true
		}
		if inst.QuotaConsumed != inst.original.QuotaConsumed {
			return true
		}
		if inst.Pid != inst.original.Pid {
			return true
		}
		if inst.MemberId != inst.original.MemberId {
			return true
		}
		if inst.Status != inst.original.Status {
			return true
		}
		if inst.Error != inst.original.Error {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "group_id":
				if inst.GroupId != inst.original.GroupId {
					return true
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					return true
				}
			case "message":
				if inst.Message != inst.original.Message {
					return true
				}
			case "role":
				if inst.Role != inst.original.Role {
					return true
				}
			case "token_consumed":
				if inst.TokenConsumed != inst.original.TokenConsumed {
					return true
				}
			case "quota_consumed":
				if inst.QuotaConsumed != inst.original.QuotaConsumed {
					return true
				}
			case "pid":
				if inst.Pid != inst.original.Pid {
					return true
				}
			case "member_id":
				if inst.MemberId != inst.original.MemberId {
					return true
				}
			case "status":
				if inst.Status != inst.original.Status {
					return true
				}
			case "error":
				if inst.Error != inst.original.Error {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *ChatGroupMessageN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &chatGroupMessageOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.GroupId != inst.original.GroupId {
			kv["group_id"] = inst.GroupId
		}
		if inst.UserId != inst.original.UserId {
			kv["user_id"] = inst.UserId
		}
		if inst.Message != inst.original.Message {
			kv["message"] = inst.Message
		}
		if inst.Role != inst.original.Role {
			kv["role"] = inst.Role
		}
		if inst.TokenConsumed != inst.original.TokenConsumed {
			kv["token_consumed"] = inst.TokenConsumed
		}
		if inst.QuotaConsumed != inst.original.QuotaConsumed {
			kv["quota_consumed"] = inst.QuotaConsumed
		}
		if inst.Pid != inst.original.Pid {
			kv["pid"] = inst.Pid
		}
		if inst.MemberId != inst.original.MemberId {
			kv["member_id"] = inst.MemberId
		}
		if inst.Status != inst.original.Status {
			kv["status"] = inst.Status
		}
		if inst.Error != inst.original.Error {
			kv["error"] = inst.Error
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "group_id":
				if inst.GroupId != inst.original.GroupId {
					kv["group_id"] = inst.GroupId
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					kv["user_id"] = inst.UserId
				}
			case "message":
				if inst.Message != inst.original.Message {
					kv["message"] = inst.Message
				}
			case "role":
				if inst.Role != inst.original.Role {
					kv["role"] = inst.Role
				}
			case "token_consumed":
				if inst.TokenConsumed != inst.original.TokenConsumed {
					kv["token_consumed"] = inst.TokenConsumed
				}
			case "quota_consumed":
				if inst.QuotaConsumed != inst.original.QuotaConsumed {
					kv["quota_consumed"] = inst.QuotaConsumed
				}
			case "pid":
				if inst.Pid != inst.original.Pid {
					kv["pid"] = inst.Pid
				}
			case "member_id":
				if inst.MemberId != inst.original.MemberId {
					kv["member_id"] = inst.MemberId
				}
			case "status":
				if inst.Status != inst.original.Status {
					kv["status"] = inst.Status
				}
			case "error":
				if inst.Error != inst.original.Error {
					kv["error"] = inst.Error
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *ChatGroupMessageN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.chatGroupMessageModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.chatGroupMessageModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a chat_group_message
func (inst *ChatGroupMessageN) Delete(ctx context.Context) error {
	if inst.chatGroupMessageModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.chatGroupMessageModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *ChatGroupMessageN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type chatGroupMessageScope struct {
	name  string
	apply func(builder query.Condition)
}

var chatGroupMessageGlobalScopes = make([]chatGroupMessageScope, 0)
var chatGroupMessageLocalScopes = make([]chatGroupMessageScope, 0)

// AddGlobalScopeForChatGroupMessage assign a global scope to a model
func AddGlobalScopeForChatGroupMessage(name string, apply func(builder query.Condition)) {
	chatGroupMessageGlobalScopes = append(chatGroupMessageGlobalScopes, chatGroupMessageScope{name: name, apply: apply})
}

// AddLocalScopeForChatGroupMessage assign a local scope to a model
func AddLocalScopeForChatGroupMessage(name string, apply func(builder query.Condition)) {
	chatGroupMessageLocalScopes = append(chatGroupMessageLocalScopes, chatGroupMessageScope{name: name, apply: apply})
}

func (m *ChatGroupMessageModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range chatGroupMessageGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range chatGroupMessageLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *ChatGroupMessageModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *ChatGroupMessageModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type ChatGroupMessage struct {
	Id            int64  `json:"id"`
	GroupId       int64  `json:"group_id,omitempty"`
	UserId        int64  `json:"user_id,omitempty"`
	Message       string `json:"message,omitempty"`
	Role          int64  `json:"role,omitempty"`
	TokenConsumed int64  `json:"token_consumed,omitempty"`
	QuotaConsumed int64  `json:"quota_consumed,omitempty"`
	Pid           int64  `json:"pid,omitempty"`
	MemberId      int64  `json:"member_id,omitempty"`
	Status        int64  `json:"status,omitempty"`
	Error         string `json:"error,omitempty"`
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (w ChatGroupMessage) ToChatGroupMessageN(allows ...string) ChatGroupMessageN {
	if len(allows) == 0 {
		return ChatGroupMessageN{

			Id:            null.IntFrom(int64(w.Id)),
			GroupId:       null.IntFrom(int64(w.GroupId)),
			UserId:        null.IntFrom(int64(w.UserId)),
			Message:       null.StringFrom(w.Message),
			Role:          null.IntFrom(int64(w.Role)),
			TokenConsumed: null.IntFrom(int64(w.TokenConsumed)),
			QuotaConsumed: null.IntFrom(int64(w.QuotaConsumed)),
			Pid:           null.IntFrom(int64(w.Pid)),
			MemberId:      null.IntFrom(int64(w.MemberId)),
			Status:        null.IntFrom(int64(w.Status)),
			Error:         null.StringFrom(w.Error),
			CreatedAt:     null.TimeFrom(w.CreatedAt),
			UpdatedAt:     null.TimeFrom(w.UpdatedAt),
		}
	}

	res := ChatGroupMessageN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "group_id":
			res.GroupId = null.IntFrom(int64(w.GroupId))
		case "user_id":
			res.UserId = null.IntFrom(int64(w.UserId))
		case "message":
			res.Message = null.StringFrom(w.Message)
		case "role":
			res.Role = null.IntFrom(int64(w.Role))
		case "token_consumed":
			res.TokenConsumed = null.IntFrom(int64(w.TokenConsumed))
		case "quota_consumed":
			res.QuotaConsumed = null.IntFrom(int64(w.QuotaConsumed))
		case "pid":
			res.Pid = null.IntFrom(int64(w.Pid))
		case "member_id":
			res.MemberId = null.IntFrom(int64(w.MemberId))
		case "status":
			res.Status = null.IntFrom(int64(w.Status))
		case "error":
			res.Error = null.StringFrom(w.Error)
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w ChatGroupMessage) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *ChatGroupMessageN) ToChatGroupMessage() ChatGroupMessage {
	return ChatGroupMessage{

		Id:            w.Id.Int64,
		GroupId:       w.GroupId.Int64,
		UserId:        w.UserId.Int64,
		Message:       w.Message.String,
		Role:          w.Role.Int64,
		TokenConsumed: w.TokenConsumed.Int64,
		QuotaConsumed: w.QuotaConsumed.Int64,
		Pid:           w.Pid.Int64,
		MemberId:      w.MemberId.Int64,
		Status:        w.Status.Int64,
		Error:         w.Error.String,
		CreatedAt:     w.CreatedAt.Time,
		UpdatedAt:     w.UpdatedAt.Time,
	}
}

// ChatGroupMessageModel is a model which encapsulates the operations of the object
type ChatGroupMessageModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var chatGroupMessageTableName = "chat_group_message"

// ChatGroupMessageTable return table name for ChatGroupMessage
func ChatGroupMessageTable() string {
	return chatGroupMessageTableName
}

const (
	FieldChatGroupMessageId            = "id"
	FieldChatGroupMessageGroupId       = "group_id"
	FieldChatGroupMessageUserId        = "user_id"
	FieldChatGroupMessageMessage       = "message"
	FieldChatGroupMessageRole          = "role"
	FieldChatGroupMessageTokenConsumed = "token_consumed"
	FieldChatGroupMessageQuotaConsumed = "quota_consumed"
	FieldChatGroupMessagePid           = "pid"
	FieldChatGroupMessageMemberId      = "member_id"
	FieldChatGroupMessageStatus        = "status"
	FieldChatGroupMessageError         = "error"
	FieldChatGroupMessageCreatedAt     = "created_at"
	FieldChatGroupMessageUpdatedAt     = "updated_at"
)

// ChatGroupMessageFields return all fields in ChatGroupMessage model
func ChatGroupMessageFields() []string {
	return []string{
		"id",
		"group_id",
		"user_id",
		"message",
		"role",
		"token_consumed",
		"quota_consumed",
		"pid",
		"member_id",
		"status",
		"error",
		"created_at",
		"updated_at",
	}
}

func SetChatGroupMessageTable(tableName string) {
	chatGroupMessageTableName = tableName
}

// NewChatGroupMessageModel create a ChatGroupMessageModel
func NewChatGroupMessageModel(db query.Database) *ChatGroupMessageModel {
	return &ChatGroupMessageModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           chatGroupMessageTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *ChatGroupMessageModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *ChatGroupMessageModel) clone() *ChatGroupMessageModel {
	return &ChatGroupMessageModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *ChatGroupMessageModel) WithoutGlobalScopes(names ...string) *ChatGroupMessageModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *ChatGroupMessageModel) WithLocalScopes(names ...string) *ChatGroupMessageModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *ChatGroupMessageModel) Condition(builder query.SQLBuilder) *ChatGroupMessageModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *ChatGroupMessageModel) Find(ctx context.Context, id int64) (*ChatGroupMessageN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *ChatGroupMessageModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *ChatGroupMessageModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *ChatGroupMessageModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]ChatGroupMessageN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *ChatGroupMessageModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]ChatGroupMessageN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"group_id",
			"user_id",
			"message",
			"role",
			"token_consumed",
			"quota_consumed",
			"pid",
			"member_id",
			"status",
			"error",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "group_id":
			selectFields = append(selectFields, f)
		case "user_id":
			selectFields = append(selectFields, f)
		case "message":
			selectFields = append(selectFields, f)
		case "role":
			selectFields = append(selectFields, f)
		case "token_consumed":
			selectFields = append(selectFields, f)
		case "quota_consumed":
			selectFields = append(selectFields, f)
		case "pid":
			selectFields = append(selectFields, f)
		case "member_id":
			selectFields = append(selectFields, f)
		case "status":
			selectFields = append(selectFields, f)
		case "error":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*ChatGroupMessageN, []interface{}) {
		var chatGroupMessageVar ChatGroupMessageN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &chatGroupMessageVar.Id)
			case "group_id":
				scanFields = append(scanFields, &chatGroupMessageVar.GroupId)
			case "user_id":
				scanFields = append(scanFields, &chatGroupMessageVar.UserId)
			case "message":
				scanFields = append(scanFields, &chatGroupMessageVar.Message)
			case "role":
				scanFields = append(scanFields, &chatGroupMessageVar.Role)
			case "token_consumed":
				scanFields = append(scanFields, &chatGroupMessageVar.TokenConsumed)
			case "quota_consumed":
				scanFields = append(scanFields, &chatGroupMessageVar.QuotaConsumed)
			case "pid":
				scanFields = append(scanFields, &chatGroupMessageVar.Pid)
			case "member_id":
				scanFields = append(scanFields, &chatGroupMessageVar.MemberId)
			case "status":
				scanFields = append(scanFields, &chatGroupMessageVar.Status)
			case "error":
				scanFields = append(scanFields, &chatGroupMessageVar.Error)
			case "created_at":
				scanFields = append(scanFields, &chatGroupMessageVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &chatGroupMessageVar.UpdatedAt)
			}
		}

		return &chatGroupMessageVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	chatGroupMessages := make([]ChatGroupMessageN, 0)
	for rows.Next() {
		chatGroupMessageReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		chatGroupMessageReal.original = &chatGroupMessageOriginal{}
		_ = query.Copy(chatGroupMessageReal, chatGroupMessageReal.original)

		chatGroupMessageReal.SetModel(m)
		chatGroupMessages = append(chatGroupMessages, *chatGroupMessageReal)
	}

	return chatGroupMessages, nil
}

// First return first result for given query
func (m *ChatGroupMessageModel) First(ctx context.Context, builders ...query.SQLBuilder) (*ChatGroupMessageN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new chat_group_message to database
func (m *ChatGroupMessageModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all chat_group_messages to database
func (m *ChatGroupMessageModel) SaveAll(ctx context.Context, chatGroupMessages []ChatGroupMessageN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, chatGroupMessage := range chatGroupMessages {
		id, err := m.Save(ctx, chatGroupMessage)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a chat_group_message to database
func (m *ChatGroupMessageModel) Save(ctx context.Context, chatGroupMessage ChatGroupMessageN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, chatGroupMessage.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new chat_group_message or update it when it has a id > 0
func (m *ChatGroupMessageModel) SaveOrUpdate(ctx context.Context, chatGroupMessage ChatGroupMessageN, onlyFields ...string) (id int64, updated bool, err error) {
	if chatGroupMessage.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, chatGroupMessage.Id.Int64, chatGroupMessage, onlyFields...)
		return chatGroupMessage.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, chatGroupMessage, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *ChatGroupMessageModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *ChatGroupMessageModel) Update(ctx context.Context, builder query.SQLBuilder, chatGroupMessage ChatGroupMessageN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, chatGroupMessage.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *ChatGroupMessageModel) UpdateById(ctx context.Context, id int64, chatGroupMessage ChatGroupMessageN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, chatGroupMessage.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *ChatGroupMessageModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *ChatGroupMessageModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
