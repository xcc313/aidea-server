package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// CreativeHistoryN is a CreativeHistory object, all fields are nullable
type CreativeHistoryN struct {
	original             *creativeHistoryOriginal
	creativeHistoryModel *CreativeHistoryModel

	Id          null.Int    `json:"id"`
	UserId      null.Int    `json:"user_id"`
	IslandId    null.String `json:"island_id"`
	IslandType  null.Int    `json:"island_type"`
	IslandModel null.String `json:"island_model"`
	Arguments   null.String `json:"arguments"`
	Prompt      null.String `json:"prompt"`
	Answer      null.String `json:"answer"`
	TaskId      null.String `json:"task_id"`
	Shared      null.Int    `json:"shared"`
	QuotaUsed   null.Int    `json:"quota_used"`
	Status      null.Int    `json:"status"`
	CreatedAt   null.Time
	UpdatedAt   null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *CreativeHistoryN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for CreativeHistory
func (inst *CreativeHistoryN) SetModel(creativeHistoryModel *CreativeHistoryModel) {
	inst.creativeHistoryModel = creativeHistoryModel
}

// creativeHistoryOriginal is an object which stores original CreativeHistory from database
type creativeHistoryOriginal struct {
	Id          null.Int
	UserId      null.Int
	IslandId    null.String
	IslandType  null.Int
	IslandModel null.String
	Arguments   null.String
	Prompt      null.String
	Answer      null.String
	TaskId      null.String
	Shared      null.Int
	QuotaUsed   null.Int
	Status      null.Int
	CreatedAt   null.Time
	UpdatedAt   null.Time
}

// Staled identify whether the object has been modified
func (inst *CreativeHistoryN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &creativeHistoryOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.UserId != inst.original.UserId {
			return true
		}
		if inst.IslandId != inst.original.IslandId {
			return true
		}
		if inst.IslandType != inst.original.IslandType {
			return true
		}
		if inst.IslandModel != inst.original.IslandModel {
			return true
		}
		if inst.Arguments != inst.original.Arguments {
			return true
		}
		if inst.Prompt != inst.original.Prompt {
			return true
		}
		if inst.Answer != inst.original.Answer {
			return true
		}
		if inst.TaskId != inst.original.TaskId {
			return true
		}
		if inst.Shared != inst.original.Shared {
			return true
		}
		if inst.QuotaUsed != inst.original.QuotaUsed {
			return true
		}
		if inst.Status != inst.original.Status {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					return true
				}
			case "island_id":
				if inst.IslandId != inst.original.IslandId {
					return true
				}
			case "island_type":
				if inst.IslandType != inst.original.IslandType {
					return true
				}
			case "island_model":
				if inst.IslandModel != inst.original.IslandModel {
					return true
				}
			case "arguments":
				if inst.Arguments != inst.original.Arguments {
					return true
				}
			case "prompt":
				if inst.Prompt != inst.original.Prompt {
					return true
				}
			case "answer":
				if inst.Answer != inst.original.Answer {
					return true
				}
			case "task_id":
				if inst.TaskId != inst.original.TaskId {
					return true
				}
			case "shared":
				if inst.Shared != inst.original.Shared {
					return true
				}
			case "quota_used":
				if inst.QuotaUsed != inst.original.QuotaUsed {
					return true
				}
			case "status":
				if inst.Status != inst.original.Status {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *CreativeHistoryN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &creativeHistoryOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.UserId != inst.original.UserId {
			kv["user_id"] = inst.UserId
		}
		if inst.IslandId != inst.original.IslandId {
			kv["island_id"] = inst.IslandId
		}
		if inst.IslandType != inst.original.IslandType {
			kv["island_type"] = inst.IslandType
		}
		if inst.IslandModel != inst.original.IslandModel {
			kv["island_model"] = inst.IslandModel
		}
		if inst.Arguments != inst.original.Arguments {
			kv["arguments"] = inst.Arguments
		}
		if inst.Prompt != inst.original.Prompt {
			kv["prompt"] = inst.Prompt
		}
		if inst.Answer != inst.original.Answer {
			kv["answer"] = inst.Answer
		}
		if inst.TaskId != inst.original.TaskId {
			kv["task_id"] = inst.TaskId
		}
		if inst.Shared != inst.original.Shared {
			kv["shared"] = inst.Shared
		}
		if inst.QuotaUsed != inst.original.QuotaUsed {
			kv["quota_used"] = inst.QuotaUsed
		}
		if inst.Status != inst.original.Status {
			kv["status"] = inst.Status
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					kv["user_id"] = inst.UserId
				}
			case "island_id":
				if inst.IslandId != inst.original.IslandId {
					kv["island_id"] = inst.IslandId
				}
			case "island_type":
				if inst.IslandType != inst.original.IslandType {
					kv["island_type"] = inst.IslandType
				}
			case "island_model":
				if inst.IslandModel != inst.original.IslandModel {
					kv["island_model"] = inst.IslandModel
				}
			case "arguments":
				if inst.Arguments != inst.original.Arguments {
					kv["arguments"] = inst.Arguments
				}
			case "prompt":
				if inst.Prompt != inst.original.Prompt {
					kv["prompt"] = inst.Prompt
				}
			case "answer":
				if inst.Answer != inst.original.Answer {
					kv["answer"] = inst.Answer
				}
			case "task_id":
				if inst.TaskId != inst.original.TaskId {
					kv["task_id"] = inst.TaskId
				}
			case "shared":
				if inst.Shared != inst.original.Shared {
					kv["shared"] = inst.Shared
				}
			case "quota_used":
				if inst.QuotaUsed != inst.original.QuotaUsed {
					kv["quota_used"] = inst.QuotaUsed
				}
			case "status":
				if inst.Status != inst.original.Status {
					kv["status"] = inst.Status
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *CreativeHistoryN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.creativeHistoryModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.creativeHistoryModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a creative_history
func (inst *CreativeHistoryN) Delete(ctx context.Context) error {
	if inst.creativeHistoryModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.creativeHistoryModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *CreativeHistoryN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type creativeHistoryScope struct {
	name  string
	apply func(builder query.Condition)
}

var creativeHistoryGlobalScopes = make([]creativeHistoryScope, 0)
var creativeHistoryLocalScopes = make([]creativeHistoryScope, 0)

// AddGlobalScopeForCreativeHistory assign a global scope to a model
func AddGlobalScopeForCreativeHistory(name string, apply func(builder query.Condition)) {
	creativeHistoryGlobalScopes = append(creativeHistoryGlobalScopes, creativeHistoryScope{name: name, apply: apply})
}

// AddLocalScopeForCreativeHistory assign a local scope to a model
func AddLocalScopeForCreativeHistory(name string, apply func(builder query.Condition)) {
	creativeHistoryLocalScopes = append(creativeHistoryLocalScopes, creativeHistoryScope{name: name, apply: apply})
}

func (m *CreativeHistoryModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range creativeHistoryGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range creativeHistoryLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *CreativeHistoryModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *CreativeHistoryModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type CreativeHistory struct {
	Id          int64  `json:"id"`
	UserId      int64  `json:"user_id"`
	IslandId    string `json:"island_id"`
	IslandType  int64  `json:"island_type"`
	IslandModel string `json:"island_model"`
	Arguments   string `json:"arguments"`
	Prompt      string `json:"prompt"`
	Answer      string `json:"answer"`
	TaskId      string `json:"task_id"`
	Shared      int64  `json:"shared"`
	QuotaUsed   int64  `json:"quota_used"`
	Status      int64  `json:"status"`
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (w CreativeHistory) ToCreativeHistoryN(allows ...string) CreativeHistoryN {
	if len(allows) == 0 {
		return CreativeHistoryN{

			Id:          null.IntFrom(int64(w.Id)),
			UserId:      null.IntFrom(int64(w.UserId)),
			IslandId:    null.StringFrom(w.IslandId),
			IslandType:  null.IntFrom(int64(w.IslandType)),
			IslandModel: null.StringFrom(w.IslandModel),
			Arguments:   null.StringFrom(w.Arguments),
			Prompt:      null.StringFrom(w.Prompt),
			Answer:      null.StringFrom(w.Answer),
			TaskId:      null.StringFrom(w.TaskId),
			Shared:      null.IntFrom(int64(w.Shared)),
			QuotaUsed:   null.IntFrom(int64(w.QuotaUsed)),
			Status:      null.IntFrom(int64(w.Status)),
			CreatedAt:   null.TimeFrom(w.CreatedAt),
			UpdatedAt:   null.TimeFrom(w.UpdatedAt),
		}
	}

	res := CreativeHistoryN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "user_id":
			res.UserId = null.IntFrom(int64(w.UserId))
		case "island_id":
			res.IslandId = null.StringFrom(w.IslandId)
		case "island_type":
			res.IslandType = null.IntFrom(int64(w.IslandType))
		case "island_model":
			res.IslandModel = null.StringFrom(w.IslandModel)
		case "arguments":
			res.Arguments = null.StringFrom(w.Arguments)
		case "prompt":
			res.Prompt = null.StringFrom(w.Prompt)
		case "answer":
			res.Answer = null.StringFrom(w.Answer)
		case "task_id":
			res.TaskId = null.StringFrom(w.TaskId)
		case "shared":
			res.Shared = null.IntFrom(int64(w.Shared))
		case "quota_used":
			res.QuotaUsed = null.IntFrom(int64(w.QuotaUsed))
		case "status":
			res.Status = null.IntFrom(int64(w.Status))
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w CreativeHistory) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *CreativeHistoryN) ToCreativeHistory() CreativeHistory {
	return CreativeHistory{

		Id:          w.Id.Int64,
		UserId:      w.UserId.Int64,
		IslandId:    w.IslandId.String,
		IslandType:  w.IslandType.Int64,
		IslandModel: w.IslandModel.String,
		Arguments:   w.Arguments.String,
		Prompt:      w.Prompt.String,
		Answer:      w.Answer.String,
		TaskId:      w.TaskId.String,
		Shared:      w.Shared.Int64,
		QuotaUsed:   w.QuotaUsed.Int64,
		Status:      w.Status.Int64,
		CreatedAt:   w.CreatedAt.Time,
		UpdatedAt:   w.UpdatedAt.Time,
	}
}

// CreativeHistoryModel is a model which encapsulates the operations of the object
type CreativeHistoryModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var creativeHistoryTableName = "creative_history"

// CreativeHistoryTable return table name for CreativeHistory
func CreativeHistoryTable() string {
	return creativeHistoryTableName
}

const (
	FieldCreativeHistoryId          = "id"
	FieldCreativeHistoryUserId      = "user_id"
	FieldCreativeHistoryIslandId    = "island_id"
	FieldCreativeHistoryIslandType  = "island_type"
	FieldCreativeHistoryIslandModel = "island_model"
	FieldCreativeHistoryArguments   = "arguments"
	FieldCreativeHistoryPrompt      = "prompt"
	FieldCreativeHistoryAnswer      = "answer"
	FieldCreativeHistoryTaskId      = "task_id"
	FieldCreativeHistoryShared      = "shared"
	FieldCreativeHistoryQuotaUsed   = "quota_used"
	FieldCreativeHistoryStatus      = "status"
	FieldCreativeHistoryCreatedAt   = "created_at"
	FieldCreativeHistoryUpdatedAt   = "updated_at"
)

// CreativeHistoryFields return all fields in CreativeHistory model
func CreativeHistoryFields() []string {
	return []string{
		"id",
		"user_id",
		"island_id",
		"island_type",
		"island_model",
		"arguments",
		"prompt",
		"answer",
		"task_id",
		"shared",
		"quota_used",
		"status",
		"created_at",
		"updated_at",
	}
}

func SetCreativeHistoryTable(tableName string) {
	creativeHistoryTableName = tableName
}

// NewCreativeHistoryModel create a CreativeHistoryModel
func NewCreativeHistoryModel(db query.Database) *CreativeHistoryModel {
	return &CreativeHistoryModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           creativeHistoryTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *CreativeHistoryModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *CreativeHistoryModel) clone() *CreativeHistoryModel {
	return &CreativeHistoryModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *CreativeHistoryModel) WithoutGlobalScopes(names ...string) *CreativeHistoryModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *CreativeHistoryModel) WithLocalScopes(names ...string) *CreativeHistoryModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *CreativeHistoryModel) Condition(builder query.SQLBuilder) *CreativeHistoryModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *CreativeHistoryModel) Find(ctx context.Context, id int64) (*CreativeHistoryN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *CreativeHistoryModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *CreativeHistoryModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *CreativeHistoryModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]CreativeHistoryN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *CreativeHistoryModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]CreativeHistoryN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"user_id",
			"island_id",
			"island_type",
			"island_model",
			"arguments",
			"prompt",
			"answer",
			"task_id",
			"shared",
			"quota_used",
			"status",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "user_id":
			selectFields = append(selectFields, f)
		case "island_id":
			selectFields = append(selectFields, f)
		case "island_type":
			selectFields = append(selectFields, f)
		case "island_model":
			selectFields = append(selectFields, f)
		case "arguments":
			selectFields = append(selectFields, f)
		case "prompt":
			selectFields = append(selectFields, f)
		case "answer":
			selectFields = append(selectFields, f)
		case "task_id":
			selectFields = append(selectFields, f)
		case "shared":
			selectFields = append(selectFields, f)
		case "quota_used":
			selectFields = append(selectFields, f)
		case "status":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*CreativeHistoryN, []interface{}) {
		var creativeHistoryVar CreativeHistoryN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &creativeHistoryVar.Id)
			case "user_id":
				scanFields = append(scanFields, &creativeHistoryVar.UserId)
			case "island_id":
				scanFields = append(scanFields, &creativeHistoryVar.IslandId)
			case "island_type":
				scanFields = append(scanFields, &creativeHistoryVar.IslandType)
			case "island_model":
				scanFields = append(scanFields, &creativeHistoryVar.IslandModel)
			case "arguments":
				scanFields = append(scanFields, &creativeHistoryVar.Arguments)
			case "prompt":
				scanFields = append(scanFields, &creativeHistoryVar.Prompt)
			case "answer":
				scanFields = append(scanFields, &creativeHistoryVar.Answer)
			case "task_id":
				scanFields = append(scanFields, &creativeHistoryVar.TaskId)
			case "shared":
				scanFields = append(scanFields, &creativeHistoryVar.Shared)
			case "quota_used":
				scanFields = append(scanFields, &creativeHistoryVar.QuotaUsed)
			case "status":
				scanFields = append(scanFields, &creativeHistoryVar.Status)
			case "created_at":
				scanFields = append(scanFields, &creativeHistoryVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &creativeHistoryVar.UpdatedAt)
			}
		}

		return &creativeHistoryVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	creativeHistorys := make([]CreativeHistoryN, 0)
	for rows.Next() {
		creativeHistoryReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		creativeHistoryReal.original = &creativeHistoryOriginal{}
		_ = query.Copy(creativeHistoryReal, creativeHistoryReal.original)

		creativeHistoryReal.SetModel(m)
		creativeHistorys = append(creativeHistorys, *creativeHistoryReal)
	}

	return creativeHistorys, nil
}

// First return first result for given query
func (m *CreativeHistoryModel) First(ctx context.Context, builders ...query.SQLBuilder) (*CreativeHistoryN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new creative_history to database
func (m *CreativeHistoryModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all creative_historys to database
func (m *CreativeHistoryModel) SaveAll(ctx context.Context, creativeHistorys []CreativeHistoryN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, creativeHistory := range creativeHistorys {
		id, err := m.Save(ctx, creativeHistory)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a creative_history to database
func (m *CreativeHistoryModel) Save(ctx context.Context, creativeHistory CreativeHistoryN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, creativeHistory.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new creative_history or update it when it has a id > 0
func (m *CreativeHistoryModel) SaveOrUpdate(ctx context.Context, creativeHistory CreativeHistoryN, onlyFields ...string) (id int64, updated bool, err error) {
	if creativeHistory.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, creativeHistory.Id.Int64, creativeHistory, onlyFields...)
		return creativeHistory.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, creativeHistory, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *CreativeHistoryModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *CreativeHistoryModel) Update(ctx context.Context, builder query.SQLBuilder, creativeHistory CreativeHistoryN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, creativeHistory.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *CreativeHistoryModel) UpdateById(ctx context.Context, id int64, creativeHistory CreativeHistoryN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, creativeHistory.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *CreativeHistoryModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *CreativeHistoryModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
