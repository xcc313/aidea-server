package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// QueueTasksPendingN is a QueueTasksPending object, all fields are nullable
type QueueTasksPendingN struct {
	original               *queueTasksPendingOriginal
	queueTasksPendingModel *QueueTasksPendingModel

	Id            null.Int    `json:"id"`
	TaskId        null.String `json:"task_id"`
	TaskType      null.String `json:"task_type"`
	Payload       null.String `json:"-"`
	NextExecuteAt null.Time   `json:"next_execute_at"`
	ExecuteTimes  null.Int    `json:"execute_times"`
	DeadlineAt    null.Time   `json:"deadline_at"`
	Status        null.Int    `json:"status"`
	CreatedAt     null.Time
	UpdatedAt     null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *QueueTasksPendingN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for QueueTasksPending
func (inst *QueueTasksPendingN) SetModel(queueTasksPendingModel *QueueTasksPendingModel) {
	inst.queueTasksPendingModel = queueTasksPendingModel
}

// queueTasksPendingOriginal is an object which stores original QueueTasksPending from database
type queueTasksPendingOriginal struct {
	Id            null.Int
	TaskId        null.String
	TaskType      null.String
	Payload       null.String
	NextExecuteAt null.Time
	ExecuteTimes  null.Int
	DeadlineAt    null.Time
	Status        null.Int
	CreatedAt     null.Time
	UpdatedAt     null.Time
}

// Staled identify whether the object has been modified
func (inst *QueueTasksPendingN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &queueTasksPendingOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.TaskId != inst.original.TaskId {
			return true
		}
		if inst.TaskType != inst.original.TaskType {
			return true
		}
		if inst.Payload != inst.original.Payload {
			return true
		}
		if inst.NextExecuteAt != inst.original.NextExecuteAt {
			return true
		}
		if inst.ExecuteTimes != inst.original.ExecuteTimes {
			return true
		}
		if inst.DeadlineAt != inst.original.DeadlineAt {
			return true
		}
		if inst.Status != inst.original.Status {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "task_id":
				if inst.TaskId != inst.original.TaskId {
					return true
				}
			case "task_type":
				if inst.TaskType != inst.original.TaskType {
					return true
				}
			case "payload":
				if inst.Payload != inst.original.Payload {
					return true
				}
			case "next_execute_at":
				if inst.NextExecuteAt != inst.original.NextExecuteAt {
					return true
				}
			case "execute_times":
				if inst.ExecuteTimes != inst.original.ExecuteTimes {
					return true
				}
			case "deadline_at":
				if inst.DeadlineAt != inst.original.DeadlineAt {
					return true
				}
			case "status":
				if inst.Status != inst.original.Status {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *QueueTasksPendingN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &queueTasksPendingOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.TaskId != inst.original.TaskId {
			kv["task_id"] = inst.TaskId
		}
		if inst.TaskType != inst.original.TaskType {
			kv["task_type"] = inst.TaskType
		}
		if inst.Payload != inst.original.Payload {
			kv["payload"] = inst.Payload
		}
		if inst.NextExecuteAt != inst.original.NextExecuteAt {
			kv["next_execute_at"] = inst.NextExecuteAt
		}
		if inst.ExecuteTimes != inst.original.ExecuteTimes {
			kv["execute_times"] = inst.ExecuteTimes
		}
		if inst.DeadlineAt != inst.original.DeadlineAt {
			kv["deadline_at"] = inst.DeadlineAt
		}
		if inst.Status != inst.original.Status {
			kv["status"] = inst.Status
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "task_id":
				if inst.TaskId != inst.original.TaskId {
					kv["task_id"] = inst.TaskId
				}
			case "task_type":
				if inst.TaskType != inst.original.TaskType {
					kv["task_type"] = inst.TaskType
				}
			case "payload":
				if inst.Payload != inst.original.Payload {
					kv["payload"] = inst.Payload
				}
			case "next_execute_at":
				if inst.NextExecuteAt != inst.original.NextExecuteAt {
					kv["next_execute_at"] = inst.NextExecuteAt
				}
			case "execute_times":
				if inst.ExecuteTimes != inst.original.ExecuteTimes {
					kv["execute_times"] = inst.ExecuteTimes
				}
			case "deadline_at":
				if inst.DeadlineAt != inst.original.DeadlineAt {
					kv["deadline_at"] = inst.DeadlineAt
				}
			case "status":
				if inst.Status != inst.original.Status {
					kv["status"] = inst.Status
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *QueueTasksPendingN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.queueTasksPendingModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.queueTasksPendingModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a queue_tasks_pending
func (inst *QueueTasksPendingN) Delete(ctx context.Context) error {
	if inst.queueTasksPendingModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.queueTasksPendingModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *QueueTasksPendingN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type queueTasksPendingScope struct {
	name  string
	apply func(builder query.Condition)
}

var queueTasksPendingGlobalScopes = make([]queueTasksPendingScope, 0)
var queueTasksPendingLocalScopes = make([]queueTasksPendingScope, 0)

// AddGlobalScopeForQueueTasksPending assign a global scope to a model
func AddGlobalScopeForQueueTasksPending(name string, apply func(builder query.Condition)) {
	queueTasksPendingGlobalScopes = append(queueTasksPendingGlobalScopes, queueTasksPendingScope{name: name, apply: apply})
}

// AddLocalScopeForQueueTasksPending assign a local scope to a model
func AddLocalScopeForQueueTasksPending(name string, apply func(builder query.Condition)) {
	queueTasksPendingLocalScopes = append(queueTasksPendingLocalScopes, queueTasksPendingScope{name: name, apply: apply})
}

func (m *QueueTasksPendingModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range queueTasksPendingGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range queueTasksPendingLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *QueueTasksPendingModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *QueueTasksPendingModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type QueueTasksPending struct {
	Id            int64     `json:"id"`
	TaskId        string    `json:"task_id"`
	TaskType      string    `json:"task_type"`
	Payload       string    `json:"-"`
	NextExecuteAt time.Time `json:"next_execute_at"`
	ExecuteTimes  int64     `json:"execute_times"`
	DeadlineAt    time.Time `json:"deadline_at"`
	Status        int64     `json:"status"`
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (w QueueTasksPending) ToQueueTasksPendingN(allows ...string) QueueTasksPendingN {
	if len(allows) == 0 {
		return QueueTasksPendingN{

			Id:            null.IntFrom(int64(w.Id)),
			TaskId:        null.StringFrom(w.TaskId),
			TaskType:      null.StringFrom(w.TaskType),
			Payload:       null.StringFrom(w.Payload),
			NextExecuteAt: null.TimeFrom(w.NextExecuteAt),
			ExecuteTimes:  null.IntFrom(int64(w.ExecuteTimes)),
			DeadlineAt:    null.TimeFrom(w.DeadlineAt),
			Status:        null.IntFrom(int64(w.Status)),
			CreatedAt:     null.TimeFrom(w.CreatedAt),
			UpdatedAt:     null.TimeFrom(w.UpdatedAt),
		}
	}

	res := QueueTasksPendingN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "task_id":
			res.TaskId = null.StringFrom(w.TaskId)
		case "task_type":
			res.TaskType = null.StringFrom(w.TaskType)
		case "payload":
			res.Payload = null.StringFrom(w.Payload)
		case "next_execute_at":
			res.NextExecuteAt = null.TimeFrom(w.NextExecuteAt)
		case "execute_times":
			res.ExecuteTimes = null.IntFrom(int64(w.ExecuteTimes))
		case "deadline_at":
			res.DeadlineAt = null.TimeFrom(w.DeadlineAt)
		case "status":
			res.Status = null.IntFrom(int64(w.Status))
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w QueueTasksPending) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *QueueTasksPendingN) ToQueueTasksPending() QueueTasksPending {
	return QueueTasksPending{

		Id:            w.Id.Int64,
		TaskId:        w.TaskId.String,
		TaskType:      w.TaskType.String,
		Payload:       w.Payload.String,
		NextExecuteAt: w.NextExecuteAt.Time,
		ExecuteTimes:  w.ExecuteTimes.Int64,
		DeadlineAt:    w.DeadlineAt.Time,
		Status:        w.Status.Int64,
		CreatedAt:     w.CreatedAt.Time,
		UpdatedAt:     w.UpdatedAt.Time,
	}
}

// QueueTasksPendingModel is a model which encapsulates the operations of the object
type QueueTasksPendingModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var queueTasksPendingTableName = "queue_tasks_pending"

// QueueTasksPendingTable return table name for QueueTasksPending
func QueueTasksPendingTable() string {
	return queueTasksPendingTableName
}

const (
	FieldQueueTasksPendingId            = "id"
	FieldQueueTasksPendingTaskId        = "task_id"
	FieldQueueTasksPendingTaskType      = "task_type"
	FieldQueueTasksPendingPayload       = "payload"
	FieldQueueTasksPendingNextExecuteAt = "next_execute_at"
	FieldQueueTasksPendingExecuteTimes  = "execute_times"
	FieldQueueTasksPendingDeadlineAt    = "deadline_at"
	FieldQueueTasksPendingStatus        = "status"
	FieldQueueTasksPendingCreatedAt     = "created_at"
	FieldQueueTasksPendingUpdatedAt     = "updated_at"
)

// QueueTasksPendingFields return all fields in QueueTasksPending model
func QueueTasksPendingFields() []string {
	return []string{
		"id",
		"task_id",
		"task_type",
		"payload",
		"next_execute_at",
		"execute_times",
		"deadline_at",
		"status",
		"created_at",
		"updated_at",
	}
}

func SetQueueTasksPendingTable(tableName string) {
	queueTasksPendingTableName = tableName
}

// NewQueueTasksPendingModel create a QueueTasksPendingModel
func NewQueueTasksPendingModel(db query.Database) *QueueTasksPendingModel {
	return &QueueTasksPendingModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           queueTasksPendingTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *QueueTasksPendingModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *QueueTasksPendingModel) clone() *QueueTasksPendingModel {
	return &QueueTasksPendingModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *QueueTasksPendingModel) WithoutGlobalScopes(names ...string) *QueueTasksPendingModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *QueueTasksPendingModel) WithLocalScopes(names ...string) *QueueTasksPendingModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *QueueTasksPendingModel) Condition(builder query.SQLBuilder) *QueueTasksPendingModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *QueueTasksPendingModel) Find(ctx context.Context, id int64) (*QueueTasksPendingN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *QueueTasksPendingModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *QueueTasksPendingModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *QueueTasksPendingModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]QueueTasksPendingN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *QueueTasksPendingModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]QueueTasksPendingN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"task_id",
			"task_type",
			"payload",
			"next_execute_at",
			"execute_times",
			"deadline_at",
			"status",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "task_id":
			selectFields = append(selectFields, f)
		case "task_type":
			selectFields = append(selectFields, f)
		case "payload":
			selectFields = append(selectFields, f)
		case "next_execute_at":
			selectFields = append(selectFields, f)
		case "execute_times":
			selectFields = append(selectFields, f)
		case "deadline_at":
			selectFields = append(selectFields, f)
		case "status":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*QueueTasksPendingN, []interface{}) {
		var queueTasksPendingVar QueueTasksPendingN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &queueTasksPendingVar.Id)
			case "task_id":
				scanFields = append(scanFields, &queueTasksPendingVar.TaskId)
			case "task_type":
				scanFields = append(scanFields, &queueTasksPendingVar.TaskType)
			case "payload":
				scanFields = append(scanFields, &queueTasksPendingVar.Payload)
			case "next_execute_at":
				scanFields = append(scanFields, &queueTasksPendingVar.NextExecuteAt)
			case "execute_times":
				scanFields = append(scanFields, &queueTasksPendingVar.ExecuteTimes)
			case "deadline_at":
				scanFields = append(scanFields, &queueTasksPendingVar.DeadlineAt)
			case "status":
				scanFields = append(scanFields, &queueTasksPendingVar.Status)
			case "created_at":
				scanFields = append(scanFields, &queueTasksPendingVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &queueTasksPendingVar.UpdatedAt)
			}
		}

		return &queueTasksPendingVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	queueTasksPendings := make([]QueueTasksPendingN, 0)
	for rows.Next() {
		queueTasksPendingReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		queueTasksPendingReal.original = &queueTasksPendingOriginal{}
		_ = query.Copy(queueTasksPendingReal, queueTasksPendingReal.original)

		queueTasksPendingReal.SetModel(m)
		queueTasksPendings = append(queueTasksPendings, *queueTasksPendingReal)
	}

	return queueTasksPendings, nil
}

// First return first result for given query
func (m *QueueTasksPendingModel) First(ctx context.Context, builders ...query.SQLBuilder) (*QueueTasksPendingN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new queue_tasks_pending to database
func (m *QueueTasksPendingModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all queue_tasks_pendings to database
func (m *QueueTasksPendingModel) SaveAll(ctx context.Context, queueTasksPendings []QueueTasksPendingN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, queueTasksPending := range queueTasksPendings {
		id, err := m.Save(ctx, queueTasksPending)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a queue_tasks_pending to database
func (m *QueueTasksPendingModel) Save(ctx context.Context, queueTasksPending QueueTasksPendingN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, queueTasksPending.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new queue_tasks_pending or update it when it has a id > 0
func (m *QueueTasksPendingModel) SaveOrUpdate(ctx context.Context, queueTasksPending QueueTasksPendingN, onlyFields ...string) (id int64, updated bool, err error) {
	if queueTasksPending.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, queueTasksPending.Id.Int64, queueTasksPending, onlyFields...)
		return queueTasksPending.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, queueTasksPending, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *QueueTasksPendingModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *QueueTasksPendingModel) Update(ctx context.Context, builder query.SQLBuilder, queueTasksPending QueueTasksPendingN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, queueTasksPending.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *QueueTasksPendingModel) UpdateById(ctx context.Context, id int64, queueTasksPending QueueTasksPendingN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, queueTasksPending.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *QueueTasksPendingModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *QueueTasksPendingModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
