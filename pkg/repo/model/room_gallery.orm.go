package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// RoomGalleryN is a RoomGallery object, all fields are nullable
type RoomGalleryN struct {
	original         *roomGalleryOriginal
	roomGalleryModel *RoomGalleryModel

	Id          null.Int    `json:"id"`
	AvatarId    null.Int    `json:"avatar_id,omitempty"`
	AvatarUrl   null.String `json:"avatar_url,omitempty"`
	Name        null.String `json:"name,omitempty"`
	Model       null.String `json:"model,omitempty"`
	Vendor      null.String `json:"vendor,omitempty"`
	Prompt      null.String `json:"prompt,omitempty"`
	Description null.String `json:"description,omitempty"`
	MaxContext  null.Int    `json:"max_context,omitempty"`
	InitMessage null.String `json:"init_message,omitempty"`
	Tags        null.String `json:"tags,omitempty"`
	VersionMin  null.String `json:"version_min,omitempty"`
	VersionMax  null.String `json:"version_max,omitempty"`
	RoomType    null.String `json:"room_type,omitempty"`
	CreatedAt   null.Time
	UpdatedAt   null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *RoomGalleryN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for RoomGallery
func (inst *RoomGalleryN) SetModel(roomGalleryModel *RoomGalleryModel) {
	inst.roomGalleryModel = roomGalleryModel
}

// roomGalleryOriginal is an object which stores original RoomGallery from database
type roomGalleryOriginal struct {
	Id          null.Int
	AvatarId    null.Int
	AvatarUrl   null.String
	Name        null.String
	Model       null.String
	Vendor      null.String
	Prompt      null.String
	Description null.String
	MaxContext  null.Int
	InitMessage null.String
	Tags        null.String
	VersionMin  null.String
	VersionMax  null.String
	RoomType    null.String
	CreatedAt   null.Time
	UpdatedAt   null.Time
}

// Staled identify whether the object has been modified
func (inst *RoomGalleryN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &roomGalleryOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.AvatarId != inst.original.AvatarId {
			return true
		}
		if inst.AvatarUrl != inst.original.AvatarUrl {
			return true
		}
		if inst.Name != inst.original.Name {
			return true
		}
		if inst.Model != inst.original.Model {
			return true
		}
		if inst.Vendor != inst.original.Vendor {
			return true
		}
		if inst.Prompt != inst.original.Prompt {
			return true
		}
		if inst.Description != inst.original.Description {
			return true
		}
		if inst.MaxContext != inst.original.MaxContext {
			return true
		}
		if inst.InitMessage != inst.original.InitMessage {
			return true
		}
		if inst.Tags != inst.original.Tags {
			return true
		}
		if inst.VersionMin != inst.original.VersionMin {
			return true
		}
		if inst.VersionMax != inst.original.VersionMax {
			return true
		}
		if inst.RoomType != inst.original.RoomType {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "avatar_id":
				if inst.AvatarId != inst.original.AvatarId {
					return true
				}
			case "avatar_url":
				if inst.AvatarUrl != inst.original.AvatarUrl {
					return true
				}
			case "name":
				if inst.Name != inst.original.Name {
					return true
				}
			case "model":
				if inst.Model != inst.original.Model {
					return true
				}
			case "vendor":
				if inst.Vendor != inst.original.Vendor {
					return true
				}
			case "prompt":
				if inst.Prompt != inst.original.Prompt {
					return true
				}
			case "description":
				if inst.Description != inst.original.Description {
					return true
				}
			case "max_context":
				if inst.MaxContext != inst.original.MaxContext {
					return true
				}
			case "init_message":
				if inst.InitMessage != inst.original.InitMessage {
					return true
				}
			case "tags":
				if inst.Tags != inst.original.Tags {
					return true
				}
			case "version_min":
				if inst.VersionMin != inst.original.VersionMin {
					return true
				}
			case "version_max":
				if inst.VersionMax != inst.original.VersionMax {
					return true
				}
			case "room_type":
				if inst.RoomType != inst.original.RoomType {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *RoomGalleryN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &roomGalleryOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.AvatarId != inst.original.AvatarId {
			kv["avatar_id"] = inst.AvatarId
		}
		if inst.AvatarUrl != inst.original.AvatarUrl {
			kv["avatar_url"] = inst.AvatarUrl
		}
		if inst.Name != inst.original.Name {
			kv["name"] = inst.Name
		}
		if inst.Model != inst.original.Model {
			kv["model"] = inst.Model
		}
		if inst.Vendor != inst.original.Vendor {
			kv["vendor"] = inst.Vendor
		}
		if inst.Prompt != inst.original.Prompt {
			kv["prompt"] = inst.Prompt
		}
		if inst.Description != inst.original.Description {
			kv["description"] = inst.Description
		}
		if inst.MaxContext != inst.original.MaxContext {
			kv["max_context"] = inst.MaxContext
		}
		if inst.InitMessage != inst.original.InitMessage {
			kv["init_message"] = inst.InitMessage
		}
		if inst.Tags != inst.original.Tags {
			kv["tags"] = inst.Tags
		}
		if inst.VersionMin != inst.original.VersionMin {
			kv["version_min"] = inst.VersionMin
		}
		if inst.VersionMax != inst.original.VersionMax {
			kv["version_max"] = inst.VersionMax
		}
		if inst.RoomType != inst.original.RoomType {
			kv["room_type"] = inst.RoomType
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "avatar_id":
				if inst.AvatarId != inst.original.AvatarId {
					kv["avatar_id"] = inst.AvatarId
				}
			case "avatar_url":
				if inst.AvatarUrl != inst.original.AvatarUrl {
					kv["avatar_url"] = inst.AvatarUrl
				}
			case "name":
				if inst.Name != inst.original.Name {
					kv["name"] = inst.Name
				}
			case "model":
				if inst.Model != inst.original.Model {
					kv["model"] = inst.Model
				}
			case "vendor":
				if inst.Vendor != inst.original.Vendor {
					kv["vendor"] = inst.Vendor
				}
			case "prompt":
				if inst.Prompt != inst.original.Prompt {
					kv["prompt"] = inst.Prompt
				}
			case "description":
				if inst.Description != inst.original.Description {
					kv["description"] = inst.Description
				}
			case "max_context":
				if inst.MaxContext != inst.original.MaxContext {
					kv["max_context"] = inst.MaxContext
				}
			case "init_message":
				if inst.InitMessage != inst.original.InitMessage {
					kv["init_message"] = inst.InitMessage
				}
			case "tags":
				if inst.Tags != inst.original.Tags {
					kv["tags"] = inst.Tags
				}
			case "version_min":
				if inst.VersionMin != inst.original.VersionMin {
					kv["version_min"] = inst.VersionMin
				}
			case "version_max":
				if inst.VersionMax != inst.original.VersionMax {
					kv["version_max"] = inst.VersionMax
				}
			case "room_type":
				if inst.RoomType != inst.original.RoomType {
					kv["room_type"] = inst.RoomType
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *RoomGalleryN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.roomGalleryModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.roomGalleryModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a room_gallery
func (inst *RoomGalleryN) Delete(ctx context.Context) error {
	if inst.roomGalleryModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.roomGalleryModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *RoomGalleryN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type roomGalleryScope struct {
	name  string
	apply func(builder query.Condition)
}

var roomGalleryGlobalScopes = make([]roomGalleryScope, 0)
var roomGalleryLocalScopes = make([]roomGalleryScope, 0)

// AddGlobalScopeForRoomGallery assign a global scope to a model
func AddGlobalScopeForRoomGallery(name string, apply func(builder query.Condition)) {
	roomGalleryGlobalScopes = append(roomGalleryGlobalScopes, roomGalleryScope{name: name, apply: apply})
}

// AddLocalScopeForRoomGallery assign a local scope to a model
func AddLocalScopeForRoomGallery(name string, apply func(builder query.Condition)) {
	roomGalleryLocalScopes = append(roomGalleryLocalScopes, roomGalleryScope{name: name, apply: apply})
}

func (m *RoomGalleryModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range roomGalleryGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range roomGalleryLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *RoomGalleryModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *RoomGalleryModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type RoomGallery struct {
	Id          int64  `json:"id"`
	AvatarId    int64  `json:"avatar_id,omitempty"`
	AvatarUrl   string `json:"avatar_url,omitempty"`
	Name        string `json:"name,omitempty"`
	Model       string `json:"model,omitempty"`
	Vendor      string `json:"vendor,omitempty"`
	Prompt      string `json:"prompt,omitempty"`
	Description string `json:"description,omitempty"`
	MaxContext  int64  `json:"max_context,omitempty"`
	InitMessage string `json:"init_message,omitempty"`
	Tags        string `json:"tags,omitempty"`
	VersionMin  string `json:"version_min,omitempty"`
	VersionMax  string `json:"version_max,omitempty"`
	RoomType    string `json:"room_type,omitempty"`
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (w RoomGallery) ToRoomGalleryN(allows ...string) RoomGalleryN {
	if len(allows) == 0 {
		return RoomGalleryN{

			Id:          null.IntFrom(int64(w.Id)),
			AvatarId:    null.IntFrom(int64(w.AvatarId)),
			AvatarUrl:   null.StringFrom(w.AvatarUrl),
			Name:        null.StringFrom(w.Name),
			Model:       null.StringFrom(w.Model),
			Vendor:      null.StringFrom(w.Vendor),
			Prompt:      null.StringFrom(w.Prompt),
			Description: null.StringFrom(w.Description),
			MaxContext:  null.IntFrom(int64(w.MaxContext)),
			InitMessage: null.StringFrom(w.InitMessage),
			Tags:        null.StringFrom(w.Tags),
			VersionMin:  null.StringFrom(w.VersionMin),
			VersionMax:  null.StringFrom(w.VersionMax),
			RoomType:    null.StringFrom(w.RoomType),
			CreatedAt:   null.TimeFrom(w.CreatedAt),
			UpdatedAt:   null.TimeFrom(w.UpdatedAt),
		}
	}

	res := RoomGalleryN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "avatar_id":
			res.AvatarId = null.IntFrom(int64(w.AvatarId))
		case "avatar_url":
			res.AvatarUrl = null.StringFrom(w.AvatarUrl)
		case "name":
			res.Name = null.StringFrom(w.Name)
		case "model":
			res.Model = null.StringFrom(w.Model)
		case "vendor":
			res.Vendor = null.StringFrom(w.Vendor)
		case "prompt":
			res.Prompt = null.StringFrom(w.Prompt)
		case "description":
			res.Description = null.StringFrom(w.Description)
		case "max_context":
			res.MaxContext = null.IntFrom(int64(w.MaxContext))
		case "init_message":
			res.InitMessage = null.StringFrom(w.InitMessage)
		case "tags":
			res.Tags = null.StringFrom(w.Tags)
		case "version_min":
			res.VersionMin = null.StringFrom(w.VersionMin)
		case "version_max":
			res.VersionMax = null.StringFrom(w.VersionMax)
		case "room_type":
			res.RoomType = null.StringFrom(w.RoomType)
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w RoomGallery) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *RoomGalleryN) ToRoomGallery() RoomGallery {
	return RoomGallery{

		Id:          w.Id.Int64,
		AvatarId:    w.AvatarId.Int64,
		AvatarUrl:   w.AvatarUrl.String,
		Name:        w.Name.String,
		Model:       w.Model.String,
		Vendor:      w.Vendor.String,
		Prompt:      w.Prompt.String,
		Description: w.Description.String,
		MaxContext:  w.MaxContext.Int64,
		InitMessage: w.InitMessage.String,
		Tags:        w.Tags.String,
		VersionMin:  w.VersionMin.String,
		VersionMax:  w.VersionMax.String,
		RoomType:    w.RoomType.String,
		CreatedAt:   w.CreatedAt.Time,
		UpdatedAt:   w.UpdatedAt.Time,
	}
}

// RoomGalleryModel is a model which encapsulates the operations of the object
type RoomGalleryModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var roomGalleryTableName = "room_gallery"

// RoomGalleryTable return table name for RoomGallery
func RoomGalleryTable() string {
	return roomGalleryTableName
}

const (
	FieldRoomGalleryId          = "id"
	FieldRoomGalleryAvatarId    = "avatar_id"
	FieldRoomGalleryAvatarUrl   = "avatar_url"
	FieldRoomGalleryName        = "name"
	FieldRoomGalleryModel       = "model"
	FieldRoomGalleryVendor      = "vendor"
	FieldRoomGalleryPrompt      = "prompt"
	FieldRoomGalleryDescription = "description"
	FieldRoomGalleryMaxContext  = "max_context"
	FieldRoomGalleryInitMessage = "init_message"
	FieldRoomGalleryTags        = "tags"
	FieldRoomGalleryVersionMin  = "version_min"
	FieldRoomGalleryVersionMax  = "version_max"
	FieldRoomGalleryRoomType    = "room_type"
	FieldRoomGalleryCreatedAt   = "created_at"
	FieldRoomGalleryUpdatedAt   = "updated_at"
)

// RoomGalleryFields return all fields in RoomGallery model
func RoomGalleryFields() []string {
	return []string{
		"id",
		"avatar_id",
		"avatar_url",
		"name",
		"model",
		"vendor",
		"prompt",
		"description",
		"max_context",
		"init_message",
		"tags",
		"version_min",
		"version_max",
		"room_type",
		"created_at",
		"updated_at",
	}
}

func SetRoomGalleryTable(tableName string) {
	roomGalleryTableName = tableName
}

// NewRoomGalleryModel create a RoomGalleryModel
func NewRoomGalleryModel(db query.Database) *RoomGalleryModel {
	return &RoomGalleryModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           roomGalleryTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *RoomGalleryModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *RoomGalleryModel) clone() *RoomGalleryModel {
	return &RoomGalleryModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *RoomGalleryModel) WithoutGlobalScopes(names ...string) *RoomGalleryModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *RoomGalleryModel) WithLocalScopes(names ...string) *RoomGalleryModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *RoomGalleryModel) Condition(builder query.SQLBuilder) *RoomGalleryModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *RoomGalleryModel) Find(ctx context.Context, id int64) (*RoomGalleryN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *RoomGalleryModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *RoomGalleryModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *RoomGalleryModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]RoomGalleryN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *RoomGalleryModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]RoomGalleryN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"avatar_id",
			"avatar_url",
			"name",
			"model",
			"vendor",
			"prompt",
			"description",
			"max_context",
			"init_message",
			"tags",
			"version_min",
			"version_max",
			"room_type",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "avatar_id":
			selectFields = append(selectFields, f)
		case "avatar_url":
			selectFields = append(selectFields, f)
		case "name":
			selectFields = append(selectFields, f)
		case "model":
			selectFields = append(selectFields, f)
		case "vendor":
			selectFields = append(selectFields, f)
		case "prompt":
			selectFields = append(selectFields, f)
		case "description":
			selectFields = append(selectFields, f)
		case "max_context":
			selectFields = append(selectFields, f)
		case "init_message":
			selectFields = append(selectFields, f)
		case "tags":
			selectFields = append(selectFields, f)
		case "version_min":
			selectFields = append(selectFields, f)
		case "version_max":
			selectFields = append(selectFields, f)
		case "room_type":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*RoomGalleryN, []interface{}) {
		var roomGalleryVar RoomGalleryN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &roomGalleryVar.Id)
			case "avatar_id":
				scanFields = append(scanFields, &roomGalleryVar.AvatarId)
			case "avatar_url":
				scanFields = append(scanFields, &roomGalleryVar.AvatarUrl)
			case "name":
				scanFields = append(scanFields, &roomGalleryVar.Name)
			case "model":
				scanFields = append(scanFields, &roomGalleryVar.Model)
			case "vendor":
				scanFields = append(scanFields, &roomGalleryVar.Vendor)
			case "prompt":
				scanFields = append(scanFields, &roomGalleryVar.Prompt)
			case "description":
				scanFields = append(scanFields, &roomGalleryVar.Description)
			case "max_context":
				scanFields = append(scanFields, &roomGalleryVar.MaxContext)
			case "init_message":
				scanFields = append(scanFields, &roomGalleryVar.InitMessage)
			case "tags":
				scanFields = append(scanFields, &roomGalleryVar.Tags)
			case "version_min":
				scanFields = append(scanFields, &roomGalleryVar.VersionMin)
			case "version_max":
				scanFields = append(scanFields, &roomGalleryVar.VersionMax)
			case "room_type":
				scanFields = append(scanFields, &roomGalleryVar.RoomType)
			case "created_at":
				scanFields = append(scanFields, &roomGalleryVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &roomGalleryVar.UpdatedAt)
			}
		}

		return &roomGalleryVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	roomGallerys := make([]RoomGalleryN, 0)
	for rows.Next() {
		roomGalleryReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		roomGalleryReal.original = &roomGalleryOriginal{}
		_ = query.Copy(roomGalleryReal, roomGalleryReal.original)

		roomGalleryReal.SetModel(m)
		roomGallerys = append(roomGallerys, *roomGalleryReal)
	}

	return roomGallerys, nil
}

// First return first result for given query
func (m *RoomGalleryModel) First(ctx context.Context, builders ...query.SQLBuilder) (*RoomGalleryN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new room_gallery to database
func (m *RoomGalleryModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all room_gallerys to database
func (m *RoomGalleryModel) SaveAll(ctx context.Context, roomGallerys []RoomGalleryN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, roomGallery := range roomGallerys {
		id, err := m.Save(ctx, roomGallery)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a room_gallery to database
func (m *RoomGalleryModel) Save(ctx context.Context, roomGallery RoomGalleryN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, roomGallery.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new room_gallery or update it when it has a id > 0
func (m *RoomGalleryModel) SaveOrUpdate(ctx context.Context, roomGallery RoomGalleryN, onlyFields ...string) (id int64, updated bool, err error) {
	if roomGallery.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, roomGallery.Id.Int64, roomGallery, onlyFields...)
		return roomGallery.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, roomGallery, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *RoomGalleryModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *RoomGalleryModel) Update(ctx context.Context, builder query.SQLBuilder, roomGallery RoomGalleryN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, roomGallery.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *RoomGalleryModel) UpdateById(ctx context.Context, id int64, roomGallery RoomGalleryN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, roomGallery.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *RoomGalleryModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *RoomGalleryModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
