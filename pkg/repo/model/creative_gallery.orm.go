package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// CreativeGalleryRandomN is a CreativeGalleryRandom object, all fields are nullable
type CreativeGalleryRandomN struct {
	original                   *creativeGalleryRandomOriginal
	creativeGalleryRandomModel *CreativeGalleryRandomModel

	Id        null.Int `json:"id"`
	GalleryId null.Int `json:"gallery_id"`
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *CreativeGalleryRandomN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for CreativeGalleryRandom
func (inst *CreativeGalleryRandomN) SetModel(creativeGalleryRandomModel *CreativeGalleryRandomModel) {
	inst.creativeGalleryRandomModel = creativeGalleryRandomModel
}

// creativeGalleryRandomOriginal is an object which stores original CreativeGalleryRandom from database
type creativeGalleryRandomOriginal struct {
	Id        null.Int
	GalleryId null.Int
}

// Staled identify whether the object has been modified
func (inst *CreativeGalleryRandomN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &creativeGalleryRandomOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.GalleryId != inst.original.GalleryId {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "gallery_id":
				if inst.GalleryId != inst.original.GalleryId {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *CreativeGalleryRandomN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &creativeGalleryRandomOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.GalleryId != inst.original.GalleryId {
			kv["gallery_id"] = inst.GalleryId
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "gallery_id":
				if inst.GalleryId != inst.original.GalleryId {
					kv["gallery_id"] = inst.GalleryId
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *CreativeGalleryRandomN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.creativeGalleryRandomModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.creativeGalleryRandomModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a creative_gallery_random
func (inst *CreativeGalleryRandomN) Delete(ctx context.Context) error {
	if inst.creativeGalleryRandomModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.creativeGalleryRandomModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *CreativeGalleryRandomN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type creativeGalleryRandomScope struct {
	name  string
	apply func(builder query.Condition)
}

var creativeGalleryRandomGlobalScopes = make([]creativeGalleryRandomScope, 0)
var creativeGalleryRandomLocalScopes = make([]creativeGalleryRandomScope, 0)

// AddGlobalScopeForCreativeGalleryRandom assign a global scope to a model
func AddGlobalScopeForCreativeGalleryRandom(name string, apply func(builder query.Condition)) {
	creativeGalleryRandomGlobalScopes = append(creativeGalleryRandomGlobalScopes, creativeGalleryRandomScope{name: name, apply: apply})
}

// AddLocalScopeForCreativeGalleryRandom assign a local scope to a model
func AddLocalScopeForCreativeGalleryRandom(name string, apply func(builder query.Condition)) {
	creativeGalleryRandomLocalScopes = append(creativeGalleryRandomLocalScopes, creativeGalleryRandomScope{name: name, apply: apply})
}

func (m *CreativeGalleryRandomModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range creativeGalleryRandomGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range creativeGalleryRandomLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *CreativeGalleryRandomModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *CreativeGalleryRandomModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type CreativeGalleryRandom struct {
	Id        int64 `json:"id"`
	GalleryId int64 `json:"gallery_id"`
}

func (w CreativeGalleryRandom) ToCreativeGalleryRandomN(allows ...string) CreativeGalleryRandomN {
	if len(allows) == 0 {
		return CreativeGalleryRandomN{

			Id:        null.IntFrom(int64(w.Id)),
			GalleryId: null.IntFrom(int64(w.GalleryId)),
		}
	}

	res := CreativeGalleryRandomN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "gallery_id":
			res.GalleryId = null.IntFrom(int64(w.GalleryId))
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w CreativeGalleryRandom) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *CreativeGalleryRandomN) ToCreativeGalleryRandom() CreativeGalleryRandom {
	return CreativeGalleryRandom{

		Id:        w.Id.Int64,
		GalleryId: w.GalleryId.Int64,
	}
}

// CreativeGalleryRandomModel is a model which encapsulates the operations of the object
type CreativeGalleryRandomModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var creativeGalleryRandomTableName = "creative_gallery_random"

// CreativeGalleryRandomTable return table name for CreativeGalleryRandom
func CreativeGalleryRandomTable() string {
	return creativeGalleryRandomTableName
}

const (
	FieldCreativeGalleryRandomId        = "id"
	FieldCreativeGalleryRandomGalleryId = "gallery_id"
)

// CreativeGalleryRandomFields return all fields in CreativeGalleryRandom model
func CreativeGalleryRandomFields() []string {
	return []string{
		"id",
		"gallery_id",
	}
}

func SetCreativeGalleryRandomTable(tableName string) {
	creativeGalleryRandomTableName = tableName
}

// NewCreativeGalleryRandomModel create a CreativeGalleryRandomModel
func NewCreativeGalleryRandomModel(db query.Database) *CreativeGalleryRandomModel {
	return &CreativeGalleryRandomModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           creativeGalleryRandomTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *CreativeGalleryRandomModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *CreativeGalleryRandomModel) clone() *CreativeGalleryRandomModel {
	return &CreativeGalleryRandomModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *CreativeGalleryRandomModel) WithoutGlobalScopes(names ...string) *CreativeGalleryRandomModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *CreativeGalleryRandomModel) WithLocalScopes(names ...string) *CreativeGalleryRandomModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *CreativeGalleryRandomModel) Condition(builder query.SQLBuilder) *CreativeGalleryRandomModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *CreativeGalleryRandomModel) Find(ctx context.Context, id int64) (*CreativeGalleryRandomN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *CreativeGalleryRandomModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *CreativeGalleryRandomModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *CreativeGalleryRandomModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]CreativeGalleryRandomN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *CreativeGalleryRandomModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]CreativeGalleryRandomN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"gallery_id",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "gallery_id":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*CreativeGalleryRandomN, []interface{}) {
		var creativeGalleryRandomVar CreativeGalleryRandomN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &creativeGalleryRandomVar.Id)
			case "gallery_id":
				scanFields = append(scanFields, &creativeGalleryRandomVar.GalleryId)
			}
		}

		return &creativeGalleryRandomVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	creativeGalleryRandoms := make([]CreativeGalleryRandomN, 0)
	for rows.Next() {
		creativeGalleryRandomReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		creativeGalleryRandomReal.original = &creativeGalleryRandomOriginal{}
		_ = query.Copy(creativeGalleryRandomReal, creativeGalleryRandomReal.original)

		creativeGalleryRandomReal.SetModel(m)
		creativeGalleryRandoms = append(creativeGalleryRandoms, *creativeGalleryRandomReal)
	}

	return creativeGalleryRandoms, nil
}

// First return first result for given query
func (m *CreativeGalleryRandomModel) First(ctx context.Context, builders ...query.SQLBuilder) (*CreativeGalleryRandomN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new creative_gallery_random to database
func (m *CreativeGalleryRandomModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all creative_gallery_randoms to database
func (m *CreativeGalleryRandomModel) SaveAll(ctx context.Context, creativeGalleryRandoms []CreativeGalleryRandomN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, creativeGalleryRandom := range creativeGalleryRandoms {
		id, err := m.Save(ctx, creativeGalleryRandom)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a creative_gallery_random to database
func (m *CreativeGalleryRandomModel) Save(ctx context.Context, creativeGalleryRandom CreativeGalleryRandomN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, creativeGalleryRandom.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new creative_gallery_random or update it when it has a id > 0
func (m *CreativeGalleryRandomModel) SaveOrUpdate(ctx context.Context, creativeGalleryRandom CreativeGalleryRandomN, onlyFields ...string) (id int64, updated bool, err error) {
	if creativeGalleryRandom.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, creativeGalleryRandom.Id.Int64, creativeGalleryRandom, onlyFields...)
		return creativeGalleryRandom.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, creativeGalleryRandom, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *CreativeGalleryRandomModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *CreativeGalleryRandomModel) Update(ctx context.Context, builder query.SQLBuilder, creativeGalleryRandom CreativeGalleryRandomN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, creativeGalleryRandom.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *CreativeGalleryRandomModel) UpdateById(ctx context.Context, id int64, creativeGalleryRandom CreativeGalleryRandomN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, creativeGalleryRandom.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *CreativeGalleryRandomModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *CreativeGalleryRandomModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}

// CreativeGalleryN is a CreativeGallery object, all fields are nullable
type CreativeGalleryN struct {
	original             *creativeGalleryOriginal
	creativeGalleryModel *CreativeGalleryModel

	Id                null.Int    `json:"id"`
	UserId            null.Int    `json:"user_id,omitempty"`
	Username          null.String `json:"username,omitempty"`
	CreativeHistoryId null.Int    `json:"creative_history_id,omitempty"`
	CreativeType      null.Int    `json:"creative_type,omitempty"`
	Meta              null.String `json:"meta,omitempty"`
	Prompt            null.String `json:"prompt,omitempty"`
	NegativePrompt    null.String `json:"negative_prompt,omitempty"`
	Answer            null.String `json:"answer,omitempty"`
	Tags              null.String `json:"tags,omitempty"`
	RefCount          null.Int    `json:"ref_count,omitempty"`
	StarLevel         null.Int    `json:"star_level,omitempty"`
	HotValue          null.Int    `json:"hot_value,omitempty"`
	Status            null.Int    `json:"status,omitempty"`
	CreatedAt         null.Time
	UpdatedAt         null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *CreativeGalleryN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for CreativeGallery
func (inst *CreativeGalleryN) SetModel(creativeGalleryModel *CreativeGalleryModel) {
	inst.creativeGalleryModel = creativeGalleryModel
}

// creativeGalleryOriginal is an object which stores original CreativeGallery from database
type creativeGalleryOriginal struct {
	Id                null.Int
	UserId            null.Int
	Username          null.String
	CreativeHistoryId null.Int
	CreativeType      null.Int
	Meta              null.String
	Prompt            null.String
	NegativePrompt    null.String
	Answer            null.String
	Tags              null.String
	RefCount          null.Int
	StarLevel         null.Int
	HotValue          null.Int
	Status            null.Int
	CreatedAt         null.Time
	UpdatedAt         null.Time
}

// Staled identify whether the object has been modified
func (inst *CreativeGalleryN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &creativeGalleryOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.UserId != inst.original.UserId {
			return true
		}
		if inst.Username != inst.original.Username {
			return true
		}
		if inst.CreativeHistoryId != inst.original.CreativeHistoryId {
			return true
		}
		if inst.CreativeType != inst.original.CreativeType {
			return true
		}
		if inst.Meta != inst.original.Meta {
			return true
		}
		if inst.Prompt != inst.original.Prompt {
			return true
		}
		if inst.NegativePrompt != inst.original.NegativePrompt {
			return true
		}
		if inst.Answer != inst.original.Answer {
			return true
		}
		if inst.Tags != inst.original.Tags {
			return true
		}
		if inst.RefCount != inst.original.RefCount {
			return true
		}
		if inst.StarLevel != inst.original.StarLevel {
			return true
		}
		if inst.HotValue != inst.original.HotValue {
			return true
		}
		if inst.Status != inst.original.Status {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					return true
				}
			case "username":
				if inst.Username != inst.original.Username {
					return true
				}
			case "creative_history_id":
				if inst.CreativeHistoryId != inst.original.CreativeHistoryId {
					return true
				}
			case "creative_type":
				if inst.CreativeType != inst.original.CreativeType {
					return true
				}
			case "meta":
				if inst.Meta != inst.original.Meta {
					return true
				}
			case "prompt":
				if inst.Prompt != inst.original.Prompt {
					return true
				}
			case "negative_prompt":
				if inst.NegativePrompt != inst.original.NegativePrompt {
					return true
				}
			case "answer":
				if inst.Answer != inst.original.Answer {
					return true
				}
			case "tags":
				if inst.Tags != inst.original.Tags {
					return true
				}
			case "ref_count":
				if inst.RefCount != inst.original.RefCount {
					return true
				}
			case "star_level":
				if inst.StarLevel != inst.original.StarLevel {
					return true
				}
			case "hot_value":
				if inst.HotValue != inst.original.HotValue {
					return true
				}
			case "status":
				if inst.Status != inst.original.Status {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *CreativeGalleryN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &creativeGalleryOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.UserId != inst.original.UserId {
			kv["user_id"] = inst.UserId
		}
		if inst.Username != inst.original.Username {
			kv["username"] = inst.Username
		}
		if inst.CreativeHistoryId != inst.original.CreativeHistoryId {
			kv["creative_history_id"] = inst.CreativeHistoryId
		}
		if inst.CreativeType != inst.original.CreativeType {
			kv["creative_type"] = inst.CreativeType
		}
		if inst.Meta != inst.original.Meta {
			kv["meta"] = inst.Meta
		}
		if inst.Prompt != inst.original.Prompt {
			kv["prompt"] = inst.Prompt
		}
		if inst.NegativePrompt != inst.original.NegativePrompt {
			kv["negative_prompt"] = inst.NegativePrompt
		}
		if inst.Answer != inst.original.Answer {
			kv["answer"] = inst.Answer
		}
		if inst.Tags != inst.original.Tags {
			kv["tags"] = inst.Tags
		}
		if inst.RefCount != inst.original.RefCount {
			kv["ref_count"] = inst.RefCount
		}
		if inst.StarLevel != inst.original.StarLevel {
			kv["star_level"] = inst.StarLevel
		}
		if inst.HotValue != inst.original.HotValue {
			kv["hot_value"] = inst.HotValue
		}
		if inst.Status != inst.original.Status {
			kv["status"] = inst.Status
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					kv["user_id"] = inst.UserId
				}
			case "username":
				if inst.Username != inst.original.Username {
					kv["username"] = inst.Username
				}
			case "creative_history_id":
				if inst.CreativeHistoryId != inst.original.CreativeHistoryId {
					kv["creative_history_id"] = inst.CreativeHistoryId
				}
			case "creative_type":
				if inst.CreativeType != inst.original.CreativeType {
					kv["creative_type"] = inst.CreativeType
				}
			case "meta":
				if inst.Meta != inst.original.Meta {
					kv["meta"] = inst.Meta
				}
			case "prompt":
				if inst.Prompt != inst.original.Prompt {
					kv["prompt"] = inst.Prompt
				}
			case "negative_prompt":
				if inst.NegativePrompt != inst.original.NegativePrompt {
					kv["negative_prompt"] = inst.NegativePrompt
				}
			case "answer":
				if inst.Answer != inst.original.Answer {
					kv["answer"] = inst.Answer
				}
			case "tags":
				if inst.Tags != inst.original.Tags {
					kv["tags"] = inst.Tags
				}
			case "ref_count":
				if inst.RefCount != inst.original.RefCount {
					kv["ref_count"] = inst.RefCount
				}
			case "star_level":
				if inst.StarLevel != inst.original.StarLevel {
					kv["star_level"] = inst.StarLevel
				}
			case "hot_value":
				if inst.HotValue != inst.original.HotValue {
					kv["hot_value"] = inst.HotValue
				}
			case "status":
				if inst.Status != inst.original.Status {
					kv["status"] = inst.Status
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *CreativeGalleryN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.creativeGalleryModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.creativeGalleryModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a creative_gallery
func (inst *CreativeGalleryN) Delete(ctx context.Context) error {
	if inst.creativeGalleryModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.creativeGalleryModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *CreativeGalleryN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type creativeGalleryScope struct {
	name  string
	apply func(builder query.Condition)
}

var creativeGalleryGlobalScopes = make([]creativeGalleryScope, 0)
var creativeGalleryLocalScopes = make([]creativeGalleryScope, 0)

// AddGlobalScopeForCreativeGallery assign a global scope to a model
func AddGlobalScopeForCreativeGallery(name string, apply func(builder query.Condition)) {
	creativeGalleryGlobalScopes = append(creativeGalleryGlobalScopes, creativeGalleryScope{name: name, apply: apply})
}

// AddLocalScopeForCreativeGallery assign a local scope to a model
func AddLocalScopeForCreativeGallery(name string, apply func(builder query.Condition)) {
	creativeGalleryLocalScopes = append(creativeGalleryLocalScopes, creativeGalleryScope{name: name, apply: apply})
}

func (m *CreativeGalleryModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range creativeGalleryGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range creativeGalleryLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *CreativeGalleryModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *CreativeGalleryModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type CreativeGallery struct {
	Id                int64  `json:"id"`
	UserId            int64  `json:"user_id,omitempty"`
	Username          string `json:"username,omitempty"`
	CreativeHistoryId int64  `json:"creative_history_id,omitempty"`
	CreativeType      int64  `json:"creative_type,omitempty"`
	Meta              string `json:"meta,omitempty"`
	Prompt            string `json:"prompt,omitempty"`
	NegativePrompt    string `json:"negative_prompt,omitempty"`
	Answer            string `json:"answer,omitempty"`
	Tags              string `json:"tags,omitempty"`
	RefCount          int64  `json:"ref_count,omitempty"`
	StarLevel         int64  `json:"star_level,omitempty"`
	HotValue          int64  `json:"hot_value,omitempty"`
	Status            int64  `json:"status,omitempty"`
	CreatedAt         time.Time
	UpdatedAt         time.Time
}

func (w CreativeGallery) ToCreativeGalleryN(allows ...string) CreativeGalleryN {
	if len(allows) == 0 {
		return CreativeGalleryN{

			Id:                null.IntFrom(int64(w.Id)),
			UserId:            null.IntFrom(int64(w.UserId)),
			Username:          null.StringFrom(w.Username),
			CreativeHistoryId: null.IntFrom(int64(w.CreativeHistoryId)),
			CreativeType:      null.IntFrom(int64(w.CreativeType)),
			Meta:              null.StringFrom(w.Meta),
			Prompt:            null.StringFrom(w.Prompt),
			NegativePrompt:    null.StringFrom(w.NegativePrompt),
			Answer:            null.StringFrom(w.Answer),
			Tags:              null.StringFrom(w.Tags),
			RefCount:          null.IntFrom(int64(w.RefCount)),
			StarLevel:         null.IntFrom(int64(w.StarLevel)),
			HotValue:          null.IntFrom(int64(w.HotValue)),
			Status:            null.IntFrom(int64(w.Status)),
			CreatedAt:         null.TimeFrom(w.CreatedAt),
			UpdatedAt:         null.TimeFrom(w.UpdatedAt),
		}
	}

	res := CreativeGalleryN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "user_id":
			res.UserId = null.IntFrom(int64(w.UserId))
		case "username":
			res.Username = null.StringFrom(w.Username)
		case "creative_history_id":
			res.CreativeHistoryId = null.IntFrom(int64(w.CreativeHistoryId))
		case "creative_type":
			res.CreativeType = null.IntFrom(int64(w.CreativeType))
		case "meta":
			res.Meta = null.StringFrom(w.Meta)
		case "prompt":
			res.Prompt = null.StringFrom(w.Prompt)
		case "negative_prompt":
			res.NegativePrompt = null.StringFrom(w.NegativePrompt)
		case "answer":
			res.Answer = null.StringFrom(w.Answer)
		case "tags":
			res.Tags = null.StringFrom(w.Tags)
		case "ref_count":
			res.RefCount = null.IntFrom(int64(w.RefCount))
		case "star_level":
			res.StarLevel = null.IntFrom(int64(w.StarLevel))
		case "hot_value":
			res.HotValue = null.IntFrom(int64(w.HotValue))
		case "status":
			res.Status = null.IntFrom(int64(w.Status))
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w CreativeGallery) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *CreativeGalleryN) ToCreativeGallery() CreativeGallery {
	return CreativeGallery{

		Id:                w.Id.Int64,
		UserId:            w.UserId.Int64,
		Username:          w.Username.String,
		CreativeHistoryId: w.CreativeHistoryId.Int64,
		CreativeType:      w.CreativeType.Int64,
		Meta:              w.Meta.String,
		Prompt:            w.Prompt.String,
		NegativePrompt:    w.NegativePrompt.String,
		Answer:            w.Answer.String,
		Tags:              w.Tags.String,
		RefCount:          w.RefCount.Int64,
		StarLevel:         w.StarLevel.Int64,
		HotValue:          w.HotValue.Int64,
		Status:            w.Status.Int64,
		CreatedAt:         w.CreatedAt.Time,
		UpdatedAt:         w.UpdatedAt.Time,
	}
}

// CreativeGalleryModel is a model which encapsulates the operations of the object
type CreativeGalleryModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var creativeGalleryTableName = "creative_gallery"

// CreativeGalleryTable return table name for CreativeGallery
func CreativeGalleryTable() string {
	return creativeGalleryTableName
}

const (
	FieldCreativeGalleryId                = "id"
	FieldCreativeGalleryUserId            = "user_id"
	FieldCreativeGalleryUsername          = "username"
	FieldCreativeGalleryCreativeHistoryId = "creative_history_id"
	FieldCreativeGalleryCreativeType      = "creative_type"
	FieldCreativeGalleryMeta              = "meta"
	FieldCreativeGalleryPrompt            = "prompt"
	FieldCreativeGalleryNegativePrompt    = "negative_prompt"
	FieldCreativeGalleryAnswer            = "answer"
	FieldCreativeGalleryTags              = "tags"
	FieldCreativeGalleryRefCount          = "ref_count"
	FieldCreativeGalleryStarLevel         = "star_level"
	FieldCreativeGalleryHotValue          = "hot_value"
	FieldCreativeGalleryStatus            = "status"
	FieldCreativeGalleryCreatedAt         = "created_at"
	FieldCreativeGalleryUpdatedAt         = "updated_at"
)

// CreativeGalleryFields return all fields in CreativeGallery model
func CreativeGalleryFields() []string {
	return []string{
		"id",
		"user_id",
		"username",
		"creative_history_id",
		"creative_type",
		"meta",
		"prompt",
		"negative_prompt",
		"answer",
		"tags",
		"ref_count",
		"star_level",
		"hot_value",
		"status",
		"created_at",
		"updated_at",
	}
}

func SetCreativeGalleryTable(tableName string) {
	creativeGalleryTableName = tableName
}

// NewCreativeGalleryModel create a CreativeGalleryModel
func NewCreativeGalleryModel(db query.Database) *CreativeGalleryModel {
	return &CreativeGalleryModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           creativeGalleryTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *CreativeGalleryModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *CreativeGalleryModel) clone() *CreativeGalleryModel {
	return &CreativeGalleryModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *CreativeGalleryModel) WithoutGlobalScopes(names ...string) *CreativeGalleryModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *CreativeGalleryModel) WithLocalScopes(names ...string) *CreativeGalleryModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *CreativeGalleryModel) Condition(builder query.SQLBuilder) *CreativeGalleryModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *CreativeGalleryModel) Find(ctx context.Context, id int64) (*CreativeGalleryN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *CreativeGalleryModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *CreativeGalleryModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *CreativeGalleryModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]CreativeGalleryN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *CreativeGalleryModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]CreativeGalleryN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"user_id",
			"username",
			"creative_history_id",
			"creative_type",
			"meta",
			"prompt",
			"negative_prompt",
			"answer",
			"tags",
			"ref_count",
			"star_level",
			"hot_value",
			"status",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "user_id":
			selectFields = append(selectFields, f)
		case "username":
			selectFields = append(selectFields, f)
		case "creative_history_id":
			selectFields = append(selectFields, f)
		case "creative_type":
			selectFields = append(selectFields, f)
		case "meta":
			selectFields = append(selectFields, f)
		case "prompt":
			selectFields = append(selectFields, f)
		case "negative_prompt":
			selectFields = append(selectFields, f)
		case "answer":
			selectFields = append(selectFields, f)
		case "tags":
			selectFields = append(selectFields, f)
		case "ref_count":
			selectFields = append(selectFields, f)
		case "star_level":
			selectFields = append(selectFields, f)
		case "hot_value":
			selectFields = append(selectFields, f)
		case "status":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*CreativeGalleryN, []interface{}) {
		var creativeGalleryVar CreativeGalleryN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &creativeGalleryVar.Id)
			case "user_id":
				scanFields = append(scanFields, &creativeGalleryVar.UserId)
			case "username":
				scanFields = append(scanFields, &creativeGalleryVar.Username)
			case "creative_history_id":
				scanFields = append(scanFields, &creativeGalleryVar.CreativeHistoryId)
			case "creative_type":
				scanFields = append(scanFields, &creativeGalleryVar.CreativeType)
			case "meta":
				scanFields = append(scanFields, &creativeGalleryVar.Meta)
			case "prompt":
				scanFields = append(scanFields, &creativeGalleryVar.Prompt)
			case "negative_prompt":
				scanFields = append(scanFields, &creativeGalleryVar.NegativePrompt)
			case "answer":
				scanFields = append(scanFields, &creativeGalleryVar.Answer)
			case "tags":
				scanFields = append(scanFields, &creativeGalleryVar.Tags)
			case "ref_count":
				scanFields = append(scanFields, &creativeGalleryVar.RefCount)
			case "star_level":
				scanFields = append(scanFields, &creativeGalleryVar.StarLevel)
			case "hot_value":
				scanFields = append(scanFields, &creativeGalleryVar.HotValue)
			case "status":
				scanFields = append(scanFields, &creativeGalleryVar.Status)
			case "created_at":
				scanFields = append(scanFields, &creativeGalleryVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &creativeGalleryVar.UpdatedAt)
			}
		}

		return &creativeGalleryVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	creativeGallerys := make([]CreativeGalleryN, 0)
	for rows.Next() {
		creativeGalleryReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		creativeGalleryReal.original = &creativeGalleryOriginal{}
		_ = query.Copy(creativeGalleryReal, creativeGalleryReal.original)

		creativeGalleryReal.SetModel(m)
		creativeGallerys = append(creativeGallerys, *creativeGalleryReal)
	}

	return creativeGallerys, nil
}

// First return first result for given query
func (m *CreativeGalleryModel) First(ctx context.Context, builders ...query.SQLBuilder) (*CreativeGalleryN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new creative_gallery to database
func (m *CreativeGalleryModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all creative_gallerys to database
func (m *CreativeGalleryModel) SaveAll(ctx context.Context, creativeGallerys []CreativeGalleryN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, creativeGallery := range creativeGallerys {
		id, err := m.Save(ctx, creativeGallery)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a creative_gallery to database
func (m *CreativeGalleryModel) Save(ctx context.Context, creativeGallery CreativeGalleryN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, creativeGallery.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new creative_gallery or update it when it has a id > 0
func (m *CreativeGalleryModel) SaveOrUpdate(ctx context.Context, creativeGallery CreativeGalleryN, onlyFields ...string) (id int64, updated bool, err error) {
	if creativeGallery.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, creativeGallery.Id.Int64, creativeGallery, onlyFields...)
		return creativeGallery.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, creativeGallery, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *CreativeGalleryModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *CreativeGalleryModel) Update(ctx context.Context, builder query.SQLBuilder, creativeGallery CreativeGalleryN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, creativeGallery.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *CreativeGalleryModel) UpdateById(ctx context.Context, id int64, creativeGallery CreativeGalleryN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, creativeGallery.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *CreativeGalleryModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *CreativeGalleryModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
