package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// PaymentHistoryN is a PaymentHistory object, all fields are nullable
type PaymentHistoryN struct {
	original            *paymentHistoryOriginal
	paymentHistoryModel *PaymentHistoryModel

	Id          null.Int    `json:"id"`
	UserId      null.Int    `json:"user_id"`
	PaymentId   null.String `json:"payment_id"`
	Source      null.String `json:"source"`
	SourceId    null.String `json:"source_id"`
	Quantity    null.Int    `json:"quantity"`
	RetailPrice null.Int    `json:"retail_price"`
	ValidUntil  null.Time   `json:"valid_until"`
	Status      null.Int    `json:"status"`
	Environment null.String `json:"environment"`
	PurchaseAt  null.Time   `json:"purchase_at"`
	CreatedAt   null.Time
	UpdatedAt   null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *PaymentHistoryN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for PaymentHistory
func (inst *PaymentHistoryN) SetModel(paymentHistoryModel *PaymentHistoryModel) {
	inst.paymentHistoryModel = paymentHistoryModel
}

// paymentHistoryOriginal is an object which stores original PaymentHistory from database
type paymentHistoryOriginal struct {
	Id          null.Int
	UserId      null.Int
	PaymentId   null.String
	Source      null.String
	SourceId    null.String
	Quantity    null.Int
	RetailPrice null.Int
	ValidUntil  null.Time
	Status      null.Int
	Environment null.String
	PurchaseAt  null.Time
	CreatedAt   null.Time
	UpdatedAt   null.Time
}

// Staled identify whether the object has been modified
func (inst *PaymentHistoryN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &paymentHistoryOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.UserId != inst.original.UserId {
			return true
		}
		if inst.PaymentId != inst.original.PaymentId {
			return true
		}
		if inst.Source != inst.original.Source {
			return true
		}
		if inst.SourceId != inst.original.SourceId {
			return true
		}
		if inst.Quantity != inst.original.Quantity {
			return true
		}
		if inst.RetailPrice != inst.original.RetailPrice {
			return true
		}
		if inst.ValidUntil != inst.original.ValidUntil {
			return true
		}
		if inst.Status != inst.original.Status {
			return true
		}
		if inst.Environment != inst.original.Environment {
			return true
		}
		if inst.PurchaseAt != inst.original.PurchaseAt {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					return true
				}
			case "payment_id":
				if inst.PaymentId != inst.original.PaymentId {
					return true
				}
			case "source":
				if inst.Source != inst.original.Source {
					return true
				}
			case "source_id":
				if inst.SourceId != inst.original.SourceId {
					return true
				}
			case "quantity":
				if inst.Quantity != inst.original.Quantity {
					return true
				}
			case "retail_price":
				if inst.RetailPrice != inst.original.RetailPrice {
					return true
				}
			case "valid_until":
				if inst.ValidUntil != inst.original.ValidUntil {
					return true
				}
			case "status":
				if inst.Status != inst.original.Status {
					return true
				}
			case "environment":
				if inst.Environment != inst.original.Environment {
					return true
				}
			case "purchase_at":
				if inst.PurchaseAt != inst.original.PurchaseAt {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *PaymentHistoryN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &paymentHistoryOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.UserId != inst.original.UserId {
			kv["user_id"] = inst.UserId
		}
		if inst.PaymentId != inst.original.PaymentId {
			kv["payment_id"] = inst.PaymentId
		}
		if inst.Source != inst.original.Source {
			kv["source"] = inst.Source
		}
		if inst.SourceId != inst.original.SourceId {
			kv["source_id"] = inst.SourceId
		}
		if inst.Quantity != inst.original.Quantity {
			kv["quantity"] = inst.Quantity
		}
		if inst.RetailPrice != inst.original.RetailPrice {
			kv["retail_price"] = inst.RetailPrice
		}
		if inst.ValidUntil != inst.original.ValidUntil {
			kv["valid_until"] = inst.ValidUntil
		}
		if inst.Status != inst.original.Status {
			kv["status"] = inst.Status
		}
		if inst.Environment != inst.original.Environment {
			kv["environment"] = inst.Environment
		}
		if inst.PurchaseAt != inst.original.PurchaseAt {
			kv["purchase_at"] = inst.PurchaseAt
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					kv["user_id"] = inst.UserId
				}
			case "payment_id":
				if inst.PaymentId != inst.original.PaymentId {
					kv["payment_id"] = inst.PaymentId
				}
			case "source":
				if inst.Source != inst.original.Source {
					kv["source"] = inst.Source
				}
			case "source_id":
				if inst.SourceId != inst.original.SourceId {
					kv["source_id"] = inst.SourceId
				}
			case "quantity":
				if inst.Quantity != inst.original.Quantity {
					kv["quantity"] = inst.Quantity
				}
			case "retail_price":
				if inst.RetailPrice != inst.original.RetailPrice {
					kv["retail_price"] = inst.RetailPrice
				}
			case "valid_until":
				if inst.ValidUntil != inst.original.ValidUntil {
					kv["valid_until"] = inst.ValidUntil
				}
			case "status":
				if inst.Status != inst.original.Status {
					kv["status"] = inst.Status
				}
			case "environment":
				if inst.Environment != inst.original.Environment {
					kv["environment"] = inst.Environment
				}
			case "purchase_at":
				if inst.PurchaseAt != inst.original.PurchaseAt {
					kv["purchase_at"] = inst.PurchaseAt
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *PaymentHistoryN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.paymentHistoryModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.paymentHistoryModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a payment_history
func (inst *PaymentHistoryN) Delete(ctx context.Context) error {
	if inst.paymentHistoryModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.paymentHistoryModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *PaymentHistoryN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type paymentHistoryScope struct {
	name  string
	apply func(builder query.Condition)
}

var paymentHistoryGlobalScopes = make([]paymentHistoryScope, 0)
var paymentHistoryLocalScopes = make([]paymentHistoryScope, 0)

// AddGlobalScopeForPaymentHistory assign a global scope to a model
func AddGlobalScopeForPaymentHistory(name string, apply func(builder query.Condition)) {
	paymentHistoryGlobalScopes = append(paymentHistoryGlobalScopes, paymentHistoryScope{name: name, apply: apply})
}

// AddLocalScopeForPaymentHistory assign a local scope to a model
func AddLocalScopeForPaymentHistory(name string, apply func(builder query.Condition)) {
	paymentHistoryLocalScopes = append(paymentHistoryLocalScopes, paymentHistoryScope{name: name, apply: apply})
}

func (m *PaymentHistoryModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range paymentHistoryGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range paymentHistoryLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *PaymentHistoryModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *PaymentHistoryModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type PaymentHistory struct {
	Id          int64     `json:"id"`
	UserId      int64     `json:"user_id"`
	PaymentId   string    `json:"payment_id"`
	Source      string    `json:"source"`
	SourceId    string    `json:"source_id"`
	Quantity    int       `json:"quantity"`
	RetailPrice int64     `json:"retail_price"`
	ValidUntil  time.Time `json:"valid_until"`
	Status      int       `json:"status"`
	Environment string    `json:"environment"`
	PurchaseAt  time.Time `json:"purchase_at"`
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (w PaymentHistory) ToPaymentHistoryN(allows ...string) PaymentHistoryN {
	if len(allows) == 0 {
		return PaymentHistoryN{

			Id:          null.IntFrom(int64(w.Id)),
			UserId:      null.IntFrom(int64(w.UserId)),
			PaymentId:   null.StringFrom(w.PaymentId),
			Source:      null.StringFrom(w.Source),
			SourceId:    null.StringFrom(w.SourceId),
			Quantity:    null.IntFrom(int64(w.Quantity)),
			RetailPrice: null.IntFrom(int64(w.RetailPrice)),
			ValidUntil:  null.TimeFrom(w.ValidUntil),
			Status:      null.IntFrom(int64(w.Status)),
			Environment: null.StringFrom(w.Environment),
			PurchaseAt:  null.TimeFrom(w.PurchaseAt),
			CreatedAt:   null.TimeFrom(w.CreatedAt),
			UpdatedAt:   null.TimeFrom(w.UpdatedAt),
		}
	}

	res := PaymentHistoryN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "user_id":
			res.UserId = null.IntFrom(int64(w.UserId))
		case "payment_id":
			res.PaymentId = null.StringFrom(w.PaymentId)
		case "source":
			res.Source = null.StringFrom(w.Source)
		case "source_id":
			res.SourceId = null.StringFrom(w.SourceId)
		case "quantity":
			res.Quantity = null.IntFrom(int64(w.Quantity))
		case "retail_price":
			res.RetailPrice = null.IntFrom(int64(w.RetailPrice))
		case "valid_until":
			res.ValidUntil = null.TimeFrom(w.ValidUntil)
		case "status":
			res.Status = null.IntFrom(int64(w.Status))
		case "environment":
			res.Environment = null.StringFrom(w.Environment)
		case "purchase_at":
			res.PurchaseAt = null.TimeFrom(w.PurchaseAt)
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w PaymentHistory) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *PaymentHistoryN) ToPaymentHistory() PaymentHistory {
	return PaymentHistory{

		Id:          w.Id.Int64,
		UserId:      w.UserId.Int64,
		PaymentId:   w.PaymentId.String,
		Source:      w.Source.String,
		SourceId:    w.SourceId.String,
		Quantity:    int(w.Quantity.Int64),
		RetailPrice: w.RetailPrice.Int64,
		ValidUntil:  w.ValidUntil.Time,
		Status:      int(w.Status.Int64),
		Environment: w.Environment.String,
		PurchaseAt:  w.PurchaseAt.Time,
		CreatedAt:   w.CreatedAt.Time,
		UpdatedAt:   w.UpdatedAt.Time,
	}
}

// PaymentHistoryModel is a model which encapsulates the operations of the object
type PaymentHistoryModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var paymentHistoryTableName = "payment_history"

// PaymentHistoryTable return table name for PaymentHistory
func PaymentHistoryTable() string {
	return paymentHistoryTableName
}

const (
	FieldPaymentHistoryId          = "id"
	FieldPaymentHistoryUserId      = "user_id"
	FieldPaymentHistoryPaymentId   = "payment_id"
	FieldPaymentHistorySource      = "source"
	FieldPaymentHistorySourceId    = "source_id"
	FieldPaymentHistoryQuantity    = "quantity"
	FieldPaymentHistoryRetailPrice = "retail_price"
	FieldPaymentHistoryValidUntil  = "valid_until"
	FieldPaymentHistoryStatus      = "status"
	FieldPaymentHistoryEnvironment = "environment"
	FieldPaymentHistoryPurchaseAt  = "purchase_at"
	FieldPaymentHistoryCreatedAt   = "created_at"
	FieldPaymentHistoryUpdatedAt   = "updated_at"
)

// PaymentHistoryFields return all fields in PaymentHistory model
func PaymentHistoryFields() []string {
	return []string{
		"id",
		"user_id",
		"payment_id",
		"source",
		"source_id",
		"quantity",
		"retail_price",
		"valid_until",
		"status",
		"environment",
		"purchase_at",
		"created_at",
		"updated_at",
	}
}

func SetPaymentHistoryTable(tableName string) {
	paymentHistoryTableName = tableName
}

// NewPaymentHistoryModel create a PaymentHistoryModel
func NewPaymentHistoryModel(db query.Database) *PaymentHistoryModel {
	return &PaymentHistoryModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           paymentHistoryTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *PaymentHistoryModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *PaymentHistoryModel) clone() *PaymentHistoryModel {
	return &PaymentHistoryModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *PaymentHistoryModel) WithoutGlobalScopes(names ...string) *PaymentHistoryModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *PaymentHistoryModel) WithLocalScopes(names ...string) *PaymentHistoryModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *PaymentHistoryModel) Condition(builder query.SQLBuilder) *PaymentHistoryModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *PaymentHistoryModel) Find(ctx context.Context, id int64) (*PaymentHistoryN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *PaymentHistoryModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *PaymentHistoryModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *PaymentHistoryModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]PaymentHistoryN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *PaymentHistoryModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]PaymentHistoryN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"user_id",
			"payment_id",
			"source",
			"source_id",
			"quantity",
			"retail_price",
			"valid_until",
			"status",
			"environment",
			"purchase_at",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "user_id":
			selectFields = append(selectFields, f)
		case "payment_id":
			selectFields = append(selectFields, f)
		case "source":
			selectFields = append(selectFields, f)
		case "source_id":
			selectFields = append(selectFields, f)
		case "quantity":
			selectFields = append(selectFields, f)
		case "retail_price":
			selectFields = append(selectFields, f)
		case "valid_until":
			selectFields = append(selectFields, f)
		case "status":
			selectFields = append(selectFields, f)
		case "environment":
			selectFields = append(selectFields, f)
		case "purchase_at":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*PaymentHistoryN, []interface{}) {
		var paymentHistoryVar PaymentHistoryN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &paymentHistoryVar.Id)
			case "user_id":
				scanFields = append(scanFields, &paymentHistoryVar.UserId)
			case "payment_id":
				scanFields = append(scanFields, &paymentHistoryVar.PaymentId)
			case "source":
				scanFields = append(scanFields, &paymentHistoryVar.Source)
			case "source_id":
				scanFields = append(scanFields, &paymentHistoryVar.SourceId)
			case "quantity":
				scanFields = append(scanFields, &paymentHistoryVar.Quantity)
			case "retail_price":
				scanFields = append(scanFields, &paymentHistoryVar.RetailPrice)
			case "valid_until":
				scanFields = append(scanFields, &paymentHistoryVar.ValidUntil)
			case "status":
				scanFields = append(scanFields, &paymentHistoryVar.Status)
			case "environment":
				scanFields = append(scanFields, &paymentHistoryVar.Environment)
			case "purchase_at":
				scanFields = append(scanFields, &paymentHistoryVar.PurchaseAt)
			case "created_at":
				scanFields = append(scanFields, &paymentHistoryVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &paymentHistoryVar.UpdatedAt)
			}
		}

		return &paymentHistoryVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	paymentHistorys := make([]PaymentHistoryN, 0)
	for rows.Next() {
		paymentHistoryReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		paymentHistoryReal.original = &paymentHistoryOriginal{}
		_ = query.Copy(paymentHistoryReal, paymentHistoryReal.original)

		paymentHistoryReal.SetModel(m)
		paymentHistorys = append(paymentHistorys, *paymentHistoryReal)
	}

	return paymentHistorys, nil
}

// First return first result for given query
func (m *PaymentHistoryModel) First(ctx context.Context, builders ...query.SQLBuilder) (*PaymentHistoryN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new payment_history to database
func (m *PaymentHistoryModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all payment_historys to database
func (m *PaymentHistoryModel) SaveAll(ctx context.Context, paymentHistorys []PaymentHistoryN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, paymentHistory := range paymentHistorys {
		id, err := m.Save(ctx, paymentHistory)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a payment_history to database
func (m *PaymentHistoryModel) Save(ctx context.Context, paymentHistory PaymentHistoryN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, paymentHistory.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new payment_history or update it when it has a id > 0
func (m *PaymentHistoryModel) SaveOrUpdate(ctx context.Context, paymentHistory PaymentHistoryN, onlyFields ...string) (id int64, updated bool, err error) {
	if paymentHistory.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, paymentHistory.Id.Int64, paymentHistory, onlyFields...)
		return paymentHistory.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, paymentHistory, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *PaymentHistoryModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *PaymentHistoryModel) Update(ctx context.Context, builder query.SQLBuilder, paymentHistory PaymentHistoryN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, paymentHistory.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *PaymentHistoryModel) UpdateById(ctx context.Context, id int64, paymentHistory PaymentHistoryN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, paymentHistory.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *PaymentHistoryModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *PaymentHistoryModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
