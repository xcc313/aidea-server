package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// ApplePayHistoryN is a ApplePayHistory object, all fields are nullable
type ApplePayHistoryN struct {
	original             *applePayHistoryOriginal
	applePayHistoryModel *ApplePayHistoryModel

	Id               null.Int    `json:"id"`
	UserId           null.Int    `json:"user_id"`
	PaymentId        null.String `json:"payment_id"`
	PurchaseId       null.String `json:"purchase_id"`
	TransactionId    null.String `json:"transaction_id"`
	ProductId        null.String `json:"product_id"`
	Source           null.String `json:"source"`
	Status           null.Int    `json:"status"`
	Environment      null.String `json:"environment"`
	ServerVerifyData null.String `json:"server_verify_data"`
	PurchaseAt       null.Time   `json:"purchase_at"`
	Note             null.String `json:"note"`
	CreatedAt        null.Time
	UpdatedAt        null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *ApplePayHistoryN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for ApplePayHistory
func (inst *ApplePayHistoryN) SetModel(applePayHistoryModel *ApplePayHistoryModel) {
	inst.applePayHistoryModel = applePayHistoryModel
}

// applePayHistoryOriginal is an object which stores original ApplePayHistory from database
type applePayHistoryOriginal struct {
	Id               null.Int
	UserId           null.Int
	PaymentId        null.String
	PurchaseId       null.String
	TransactionId    null.String
	ProductId        null.String
	Source           null.String
	Status           null.Int
	Environment      null.String
	ServerVerifyData null.String
	PurchaseAt       null.Time
	Note             null.String
	CreatedAt        null.Time
	UpdatedAt        null.Time
}

// Staled identify whether the object has been modified
func (inst *ApplePayHistoryN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &applePayHistoryOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.UserId != inst.original.UserId {
			return true
		}
		if inst.PaymentId != inst.original.PaymentId {
			return true
		}
		if inst.PurchaseId != inst.original.PurchaseId {
			return true
		}
		if inst.TransactionId != inst.original.TransactionId {
			return true
		}
		if inst.ProductId != inst.original.ProductId {
			return true
		}
		if inst.Source != inst.original.Source {
			return true
		}
		if inst.Status != inst.original.Status {
			return true
		}
		if inst.Environment != inst.original.Environment {
			return true
		}
		if inst.ServerVerifyData != inst.original.ServerVerifyData {
			return true
		}
		if inst.PurchaseAt != inst.original.PurchaseAt {
			return true
		}
		if inst.Note != inst.original.Note {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					return true
				}
			case "payment_id":
				if inst.PaymentId != inst.original.PaymentId {
					return true
				}
			case "purchase_id":
				if inst.PurchaseId != inst.original.PurchaseId {
					return true
				}
			case "transaction_id":
				if inst.TransactionId != inst.original.TransactionId {
					return true
				}
			case "product_id":
				if inst.ProductId != inst.original.ProductId {
					return true
				}
			case "source":
				if inst.Source != inst.original.Source {
					return true
				}
			case "status":
				if inst.Status != inst.original.Status {
					return true
				}
			case "environment":
				if inst.Environment != inst.original.Environment {
					return true
				}
			case "server_verify_data":
				if inst.ServerVerifyData != inst.original.ServerVerifyData {
					return true
				}
			case "purchase_at":
				if inst.PurchaseAt != inst.original.PurchaseAt {
					return true
				}
			case "note":
				if inst.Note != inst.original.Note {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *ApplePayHistoryN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &applePayHistoryOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.UserId != inst.original.UserId {
			kv["user_id"] = inst.UserId
		}
		if inst.PaymentId != inst.original.PaymentId {
			kv["payment_id"] = inst.PaymentId
		}
		if inst.PurchaseId != inst.original.PurchaseId {
			kv["purchase_id"] = inst.PurchaseId
		}
		if inst.TransactionId != inst.original.TransactionId {
			kv["transaction_id"] = inst.TransactionId
		}
		if inst.ProductId != inst.original.ProductId {
			kv["product_id"] = inst.ProductId
		}
		if inst.Source != inst.original.Source {
			kv["source"] = inst.Source
		}
		if inst.Status != inst.original.Status {
			kv["status"] = inst.Status
		}
		if inst.Environment != inst.original.Environment {
			kv["environment"] = inst.Environment
		}
		if inst.ServerVerifyData != inst.original.ServerVerifyData {
			kv["server_verify_data"] = inst.ServerVerifyData
		}
		if inst.PurchaseAt != inst.original.PurchaseAt {
			kv["purchase_at"] = inst.PurchaseAt
		}
		if inst.Note != inst.original.Note {
			kv["note"] = inst.Note
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "user_id":
				if inst.UserId != inst.original.UserId {
					kv["user_id"] = inst.UserId
				}
			case "payment_id":
				if inst.PaymentId != inst.original.PaymentId {
					kv["payment_id"] = inst.PaymentId
				}
			case "purchase_id":
				if inst.PurchaseId != inst.original.PurchaseId {
					kv["purchase_id"] = inst.PurchaseId
				}
			case "transaction_id":
				if inst.TransactionId != inst.original.TransactionId {
					kv["transaction_id"] = inst.TransactionId
				}
			case "product_id":
				if inst.ProductId != inst.original.ProductId {
					kv["product_id"] = inst.ProductId
				}
			case "source":
				if inst.Source != inst.original.Source {
					kv["source"] = inst.Source
				}
			case "status":
				if inst.Status != inst.original.Status {
					kv["status"] = inst.Status
				}
			case "environment":
				if inst.Environment != inst.original.Environment {
					kv["environment"] = inst.Environment
				}
			case "server_verify_data":
				if inst.ServerVerifyData != inst.original.ServerVerifyData {
					kv["server_verify_data"] = inst.ServerVerifyData
				}
			case "purchase_at":
				if inst.PurchaseAt != inst.original.PurchaseAt {
					kv["purchase_at"] = inst.PurchaseAt
				}
			case "note":
				if inst.Note != inst.original.Note {
					kv["note"] = inst.Note
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *ApplePayHistoryN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.applePayHistoryModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.applePayHistoryModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a apple_pay_history
func (inst *ApplePayHistoryN) Delete(ctx context.Context) error {
	if inst.applePayHistoryModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.applePayHistoryModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *ApplePayHistoryN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type applePayHistoryScope struct {
	name  string
	apply func(builder query.Condition)
}

var applePayHistoryGlobalScopes = make([]applePayHistoryScope, 0)
var applePayHistoryLocalScopes = make([]applePayHistoryScope, 0)

// AddGlobalScopeForApplePayHistory assign a global scope to a model
func AddGlobalScopeForApplePayHistory(name string, apply func(builder query.Condition)) {
	applePayHistoryGlobalScopes = append(applePayHistoryGlobalScopes, applePayHistoryScope{name: name, apply: apply})
}

// AddLocalScopeForApplePayHistory assign a local scope to a model
func AddLocalScopeForApplePayHistory(name string, apply func(builder query.Condition)) {
	applePayHistoryLocalScopes = append(applePayHistoryLocalScopes, applePayHistoryScope{name: name, apply: apply})
}

func (m *ApplePayHistoryModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range applePayHistoryGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range applePayHistoryLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *ApplePayHistoryModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *ApplePayHistoryModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type ApplePayHistory struct {
	Id               int64     `json:"id"`
	UserId           int64     `json:"user_id"`
	PaymentId        string    `json:"payment_id"`
	PurchaseId       string    `json:"purchase_id"`
	TransactionId    string    `json:"transaction_id"`
	ProductId        string    `json:"product_id"`
	Source           string    `json:"source"`
	Status           int       `json:"status"`
	Environment      string    `json:"environment"`
	ServerVerifyData string    `json:"server_verify_data"`
	PurchaseAt       time.Time `json:"purchase_at"`
	Note             string    `json:"note"`
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

func (w ApplePayHistory) ToApplePayHistoryN(allows ...string) ApplePayHistoryN {
	if len(allows) == 0 {
		return ApplePayHistoryN{

			Id:               null.IntFrom(int64(w.Id)),
			UserId:           null.IntFrom(int64(w.UserId)),
			PaymentId:        null.StringFrom(w.PaymentId),
			PurchaseId:       null.StringFrom(w.PurchaseId),
			TransactionId:    null.StringFrom(w.TransactionId),
			ProductId:        null.StringFrom(w.ProductId),
			Source:           null.StringFrom(w.Source),
			Status:           null.IntFrom(int64(w.Status)),
			Environment:      null.StringFrom(w.Environment),
			ServerVerifyData: null.StringFrom(w.ServerVerifyData),
			PurchaseAt:       null.TimeFrom(w.PurchaseAt),
			Note:             null.StringFrom(w.Note),
			CreatedAt:        null.TimeFrom(w.CreatedAt),
			UpdatedAt:        null.TimeFrom(w.UpdatedAt),
		}
	}

	res := ApplePayHistoryN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "user_id":
			res.UserId = null.IntFrom(int64(w.UserId))
		case "payment_id":
			res.PaymentId = null.StringFrom(w.PaymentId)
		case "purchase_id":
			res.PurchaseId = null.StringFrom(w.PurchaseId)
		case "transaction_id":
			res.TransactionId = null.StringFrom(w.TransactionId)
		case "product_id":
			res.ProductId = null.StringFrom(w.ProductId)
		case "source":
			res.Source = null.StringFrom(w.Source)
		case "status":
			res.Status = null.IntFrom(int64(w.Status))
		case "environment":
			res.Environment = null.StringFrom(w.Environment)
		case "server_verify_data":
			res.ServerVerifyData = null.StringFrom(w.ServerVerifyData)
		case "purchase_at":
			res.PurchaseAt = null.TimeFrom(w.PurchaseAt)
		case "note":
			res.Note = null.StringFrom(w.Note)
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w ApplePayHistory) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *ApplePayHistoryN) ToApplePayHistory() ApplePayHistory {
	return ApplePayHistory{

		Id:               w.Id.Int64,
		UserId:           w.UserId.Int64,
		PaymentId:        w.PaymentId.String,
		PurchaseId:       w.PurchaseId.String,
		TransactionId:    w.TransactionId.String,
		ProductId:        w.ProductId.String,
		Source:           w.Source.String,
		Status:           int(w.Status.Int64),
		Environment:      w.Environment.String,
		ServerVerifyData: w.ServerVerifyData.String,
		PurchaseAt:       w.PurchaseAt.Time,
		Note:             w.Note.String,
		CreatedAt:        w.CreatedAt.Time,
		UpdatedAt:        w.UpdatedAt.Time,
	}
}

// ApplePayHistoryModel is a model which encapsulates the operations of the object
type ApplePayHistoryModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var applePayHistoryTableName = "apple_pay_history"

// ApplePayHistoryTable return table name for ApplePayHistory
func ApplePayHistoryTable() string {
	return applePayHistoryTableName
}

const (
	FieldApplePayHistoryId               = "id"
	FieldApplePayHistoryUserId           = "user_id"
	FieldApplePayHistoryPaymentId        = "payment_id"
	FieldApplePayHistoryPurchaseId       = "purchase_id"
	FieldApplePayHistoryTransactionId    = "transaction_id"
	FieldApplePayHistoryProductId        = "product_id"
	FieldApplePayHistorySource           = "source"
	FieldApplePayHistoryStatus           = "status"
	FieldApplePayHistoryEnvironment      = "environment"
	FieldApplePayHistoryServerVerifyData = "server_verify_data"
	FieldApplePayHistoryPurchaseAt       = "purchase_at"
	FieldApplePayHistoryNote             = "note"
	FieldApplePayHistoryCreatedAt        = "created_at"
	FieldApplePayHistoryUpdatedAt        = "updated_at"
)

// ApplePayHistoryFields return all fields in ApplePayHistory model
func ApplePayHistoryFields() []string {
	return []string{
		"id",
		"user_id",
		"payment_id",
		"purchase_id",
		"transaction_id",
		"product_id",
		"source",
		"status",
		"environment",
		"server_verify_data",
		"purchase_at",
		"note",
		"created_at",
		"updated_at",
	}
}

func SetApplePayHistoryTable(tableName string) {
	applePayHistoryTableName = tableName
}

// NewApplePayHistoryModel create a ApplePayHistoryModel
func NewApplePayHistoryModel(db query.Database) *ApplePayHistoryModel {
	return &ApplePayHistoryModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           applePayHistoryTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *ApplePayHistoryModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *ApplePayHistoryModel) clone() *ApplePayHistoryModel {
	return &ApplePayHistoryModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *ApplePayHistoryModel) WithoutGlobalScopes(names ...string) *ApplePayHistoryModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *ApplePayHistoryModel) WithLocalScopes(names ...string) *ApplePayHistoryModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *ApplePayHistoryModel) Condition(builder query.SQLBuilder) *ApplePayHistoryModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *ApplePayHistoryModel) Find(ctx context.Context, id int64) (*ApplePayHistoryN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *ApplePayHistoryModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *ApplePayHistoryModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *ApplePayHistoryModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]ApplePayHistoryN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *ApplePayHistoryModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]ApplePayHistoryN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"user_id",
			"payment_id",
			"purchase_id",
			"transaction_id",
			"product_id",
			"source",
			"status",
			"environment",
			"server_verify_data",
			"purchase_at",
			"note",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "user_id":
			selectFields = append(selectFields, f)
		case "payment_id":
			selectFields = append(selectFields, f)
		case "purchase_id":
			selectFields = append(selectFields, f)
		case "transaction_id":
			selectFields = append(selectFields, f)
		case "product_id":
			selectFields = append(selectFields, f)
		case "source":
			selectFields = append(selectFields, f)
		case "status":
			selectFields = append(selectFields, f)
		case "environment":
			selectFields = append(selectFields, f)
		case "server_verify_data":
			selectFields = append(selectFields, f)
		case "purchase_at":
			selectFields = append(selectFields, f)
		case "note":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*ApplePayHistoryN, []interface{}) {
		var applePayHistoryVar ApplePayHistoryN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &applePayHistoryVar.Id)
			case "user_id":
				scanFields = append(scanFields, &applePayHistoryVar.UserId)
			case "payment_id":
				scanFields = append(scanFields, &applePayHistoryVar.PaymentId)
			case "purchase_id":
				scanFields = append(scanFields, &applePayHistoryVar.PurchaseId)
			case "transaction_id":
				scanFields = append(scanFields, &applePayHistoryVar.TransactionId)
			case "product_id":
				scanFields = append(scanFields, &applePayHistoryVar.ProductId)
			case "source":
				scanFields = append(scanFields, &applePayHistoryVar.Source)
			case "status":
				scanFields = append(scanFields, &applePayHistoryVar.Status)
			case "environment":
				scanFields = append(scanFields, &applePayHistoryVar.Environment)
			case "server_verify_data":
				scanFields = append(scanFields, &applePayHistoryVar.ServerVerifyData)
			case "purchase_at":
				scanFields = append(scanFields, &applePayHistoryVar.PurchaseAt)
			case "note":
				scanFields = append(scanFields, &applePayHistoryVar.Note)
			case "created_at":
				scanFields = append(scanFields, &applePayHistoryVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &applePayHistoryVar.UpdatedAt)
			}
		}

		return &applePayHistoryVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	applePayHistorys := make([]ApplePayHistoryN, 0)
	for rows.Next() {
		applePayHistoryReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		applePayHistoryReal.original = &applePayHistoryOriginal{}
		_ = query.Copy(applePayHistoryReal, applePayHistoryReal.original)

		applePayHistoryReal.SetModel(m)
		applePayHistorys = append(applePayHistorys, *applePayHistoryReal)
	}

	return applePayHistorys, nil
}

// First return first result for given query
func (m *ApplePayHistoryModel) First(ctx context.Context, builders ...query.SQLBuilder) (*ApplePayHistoryN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new apple_pay_history to database
func (m *ApplePayHistoryModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all apple_pay_historys to database
func (m *ApplePayHistoryModel) SaveAll(ctx context.Context, applePayHistorys []ApplePayHistoryN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, applePayHistory := range applePayHistorys {
		id, err := m.Save(ctx, applePayHistory)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a apple_pay_history to database
func (m *ApplePayHistoryModel) Save(ctx context.Context, applePayHistory ApplePayHistoryN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, applePayHistory.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new apple_pay_history or update it when it has a id > 0
func (m *ApplePayHistoryModel) SaveOrUpdate(ctx context.Context, applePayHistory ApplePayHistoryN, onlyFields ...string) (id int64, updated bool, err error) {
	if applePayHistory.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, applePayHistory.Id.Int64, applePayHistory, onlyFields...)
		return applePayHistory.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, applePayHistory, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *ApplePayHistoryModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *ApplePayHistoryModel) Update(ctx context.Context, builder query.SQLBuilder, applePayHistory ApplePayHistoryN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, applePayHistory.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *ApplePayHistoryModel) UpdateById(ctx context.Context, id int64, applePayHistory ApplePayHistoryN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, applePayHistory.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *ApplePayHistoryModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *ApplePayHistoryModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
