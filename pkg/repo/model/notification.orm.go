package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// NotificationsN is a Notifications object, all fields are nullable
type NotificationsN struct {
	original           *notificationsOriginal
	notificationsModel *NotificationsModel

	Id        null.Int    `json:"id"`
	Title     null.String `json:"title"`
	Content   null.String `json:"content"`
	ArticleId null.Int    `json:"article_id"`
	Type      null.String `json:"type,omitempty"`
	CreatedAt null.Time   `json:"created_at,omitempty"`
	UpdatedAt null.Time   `json:"updated_at,omitempty"`
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *NotificationsN) As(dst interface{}) error {
	return query.Copy(inst, dst)
}

// SetModel set model for Notifications
func (inst *NotificationsN) SetModel(notificationsModel *NotificationsModel) {
	inst.notificationsModel = notificationsModel
}

// notificationsOriginal is an object which stores original Notifications from database
type notificationsOriginal struct {
	Id        null.Int
	Title     null.String
	Content   null.String
	ArticleId null.Int
	Type      null.String
	CreatedAt null.Time
	UpdatedAt null.Time
}

// Staled identify whether the object has been modified
func (inst *NotificationsN) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &notificationsOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.Title != inst.original.Title {
			return true
		}
		if inst.Content != inst.original.Content {
			return true
		}
		if inst.ArticleId != inst.original.ArticleId {
			return true
		}
		if inst.Type != inst.original.Type {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "title":
				if inst.Title != inst.original.Title {
					return true
				}
			case "content":
				if inst.Content != inst.original.Content {
					return true
				}
			case "article_id":
				if inst.ArticleId != inst.original.ArticleId {
					return true
				}
			case "type":
				if inst.Type != inst.original.Type {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *NotificationsN) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &notificationsOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.Title != inst.original.Title {
			kv["title"] = inst.Title
		}
		if inst.Content != inst.original.Content {
			kv["content"] = inst.Content
		}
		if inst.ArticleId != inst.original.ArticleId {
			kv["article_id"] = inst.ArticleId
		}
		if inst.Type != inst.original.Type {
			kv["type"] = inst.Type
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
		if inst.UpdatedAt != inst.original.UpdatedAt {
			kv["updated_at"] = inst.UpdatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "title":
				if inst.Title != inst.original.Title {
					kv["title"] = inst.Title
				}
			case "content":
				if inst.Content != inst.original.Content {
					kv["content"] = inst.Content
				}
			case "article_id":
				if inst.ArticleId != inst.original.ArticleId {
					kv["article_id"] = inst.ArticleId
				}
			case "type":
				if inst.Type != inst.original.Type {
					kv["type"] = inst.Type
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			case "updated_at":
				if inst.UpdatedAt != inst.original.UpdatedAt {
					kv["updated_at"] = inst.UpdatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *NotificationsN) Save(ctx context.Context, onlyFields ...string) error {
	if inst.notificationsModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.notificationsModel.SaveOrUpdate(ctx, *inst, onlyFields...)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a notifications
func (inst *NotificationsN) Delete(ctx context.Context) error {
	if inst.notificationsModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.notificationsModel.DeleteById(ctx, inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *NotificationsN) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type notificationsScope struct {
	name  string
	apply func(builder query.Condition)
}

var notificationsGlobalScopes = make([]notificationsScope, 0)
var notificationsLocalScopes = make([]notificationsScope, 0)

// AddGlobalScopeForNotifications assign a global scope to a model
func AddGlobalScopeForNotifications(name string, apply func(builder query.Condition)) {
	notificationsGlobalScopes = append(notificationsGlobalScopes, notificationsScope{name: name, apply: apply})
}

// AddLocalScopeForNotifications assign a local scope to a model
func AddLocalScopeForNotifications(name string, apply func(builder query.Condition)) {
	notificationsLocalScopes = append(notificationsLocalScopes, notificationsScope{name: name, apply: apply})
}

func (m *NotificationsModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range notificationsGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range notificationsLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *NotificationsModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *NotificationsModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type Notifications struct {
	Id        int64     `json:"id"`
	Title     string    `json:"title"`
	Content   string    `json:"content"`
	ArticleId int64     `json:"article_id"`
	Type      string    `json:"type,omitempty"`
	CreatedAt time.Time `json:"created_at,omitempty"`
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

func (w Notifications) ToNotificationsN(allows ...string) NotificationsN {
	if len(allows) == 0 {
		return NotificationsN{

			Id:        null.IntFrom(int64(w.Id)),
			Title:     null.StringFrom(w.Title),
			Content:   null.StringFrom(w.Content),
			ArticleId: null.IntFrom(int64(w.ArticleId)),
			Type:      null.StringFrom(w.Type),
			CreatedAt: null.TimeFrom(w.CreatedAt),
			UpdatedAt: null.TimeFrom(w.UpdatedAt),
		}
	}

	res := NotificationsN{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "title":
			res.Title = null.StringFrom(w.Title)
		case "content":
			res.Content = null.StringFrom(w.Content)
		case "article_id":
			res.ArticleId = null.IntFrom(int64(w.ArticleId))
		case "type":
			res.Type = null.StringFrom(w.Type)
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		case "updated_at":
			res.UpdatedAt = null.TimeFrom(w.UpdatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w Notifications) As(dst interface{}) error {
	return query.Copy(w, dst)
}

func (w *NotificationsN) ToNotifications() Notifications {
	return Notifications{

		Id:        w.Id.Int64,
		Title:     w.Title.String,
		Content:   w.Content.String,
		ArticleId: w.ArticleId.Int64,
		Type:      w.Type.String,
		CreatedAt: w.CreatedAt.Time,
		UpdatedAt: w.UpdatedAt.Time,
	}
}

// NotificationsModel is a model which encapsulates the operations of the object
type NotificationsModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var notificationsTableName = "notifications"

// NotificationsTable return table name for Notifications
func NotificationsTable() string {
	return notificationsTableName
}

const (
	FieldNotificationsId        = "id"
	FieldNotificationsTitle     = "title"
	FieldNotificationsContent   = "content"
	FieldNotificationsArticleId = "article_id"
	FieldNotificationsType      = "type"
	FieldNotificationsCreatedAt = "created_at"
	FieldNotificationsUpdatedAt = "updated_at"
)

// NotificationsFields return all fields in Notifications model
func NotificationsFields() []string {
	return []string{
		"id",
		"title",
		"content",
		"article_id",
		"type",
		"created_at",
		"updated_at",
	}
}

func SetNotificationsTable(tableName string) {
	notificationsTableName = tableName
}

// NewNotificationsModel create a NotificationsModel
func NewNotificationsModel(db query.Database) *NotificationsModel {
	return &NotificationsModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           notificationsTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *NotificationsModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *NotificationsModel) clone() *NotificationsModel {
	return &NotificationsModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *NotificationsModel) WithoutGlobalScopes(names ...string) *NotificationsModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *NotificationsModel) WithLocalScopes(names ...string) *NotificationsModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *NotificationsModel) Condition(builder query.SQLBuilder) *NotificationsModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *NotificationsModel) Find(ctx context.Context, id int64) (*NotificationsN, error) {
	return m.First(ctx, m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *NotificationsModel) Exists(ctx context.Context, builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(ctx, builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *NotificationsModel) Count(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *NotificationsModel) Paginate(ctx context.Context, page int64, perPage int64, builders ...query.SQLBuilder) ([]NotificationsN, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(ctx, builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(ctx, append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *NotificationsModel) Get(ctx context.Context, builders ...query.SQLBuilder) ([]NotificationsN, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"title",
			"content",
			"article_id",
			"type",
			"created_at",
			"updated_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "title":
			selectFields = append(selectFields, f)
		case "content":
			selectFields = append(selectFields, f)
		case "article_id":
			selectFields = append(selectFields, f)
		case "type":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		case "updated_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*NotificationsN, []interface{}) {
		var notificationsVar NotificationsN
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &notificationsVar.Id)
			case "title":
				scanFields = append(scanFields, &notificationsVar.Title)
			case "content":
				scanFields = append(scanFields, &notificationsVar.Content)
			case "article_id":
				scanFields = append(scanFields, &notificationsVar.ArticleId)
			case "type":
				scanFields = append(scanFields, &notificationsVar.Type)
			case "created_at":
				scanFields = append(scanFields, &notificationsVar.CreatedAt)
			case "updated_at":
				scanFields = append(scanFields, &notificationsVar.UpdatedAt)
			}
		}

		return &notificationsVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(ctx, sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	notificationss := make([]NotificationsN, 0)
	for rows.Next() {
		notificationsReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		notificationsReal.original = &notificationsOriginal{}
		_ = query.Copy(notificationsReal, notificationsReal.original)

		notificationsReal.SetModel(m)
		notificationss = append(notificationss, *notificationsReal)
	}

	return notificationss, nil
}

// First return first result for given query
func (m *NotificationsModel) First(ctx context.Context, builders ...query.SQLBuilder) (*NotificationsN, error) {
	res, err := m.Get(ctx, append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return nil, err
	}

	if len(res) == 0 {
		return nil, query.ErrNoResult
	}

	return &res[0], nil
}

// Create save a new notifications to database
func (m *NotificationsModel) Create(ctx context.Context, kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	if _, ok := kv["updated_at"]; !ok {
		kv["updated_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all notificationss to database
func (m *NotificationsModel) SaveAll(ctx context.Context, notificationss []NotificationsN) ([]int64, error) {
	ids := make([]int64, 0)
	for _, notifications := range notificationss {
		id, err := m.Save(ctx, notifications)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a notifications to database
func (m *NotificationsModel) Save(ctx context.Context, notifications NotificationsN, onlyFields ...string) (int64, error) {
	return m.Create(ctx, notifications.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new notifications or update it when it has a id > 0
func (m *NotificationsModel) SaveOrUpdate(ctx context.Context, notifications NotificationsN, onlyFields ...string) (id int64, updated bool, err error) {
	if notifications.Id.Int64 > 0 {
		_, _err := m.UpdateById(ctx, notifications.Id.Int64, notifications, onlyFields...)
		return notifications.Id.Int64, true, _err
	}

	_id, _err := m.Save(ctx, notifications, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *NotificationsModel) UpdateFields(ctx context.Context, kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	kv["updated_at"] = time.Now()

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *NotificationsModel) Update(ctx context.Context, builder query.SQLBuilder, notifications NotificationsN, onlyFields ...string) (int64, error) {
	return m.UpdateFields(ctx, notifications.StaledKV(onlyFields...), builder)
}

// UpdateById update a model by id
func (m *NotificationsModel) UpdateById(ctx context.Context, id int64, notifications NotificationsN, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(ctx, notifications.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *NotificationsModel) Delete(ctx context.Context, builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(ctx, sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *NotificationsModel) DeleteById(ctx context.Context, id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete(ctx)
}
